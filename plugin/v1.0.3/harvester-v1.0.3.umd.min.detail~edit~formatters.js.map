{"version":3,"sources":["webpack://harvester-v1.0.3/./mixins/harvester-vm/impl.js","webpack://harvester-v1.0.3/./mixins/harvester-vm/index.js"],"names":["QGA_JSON","package_update","packages","runcmd","QGA_MAP","default","USB_TABLET","bus","name","type","SSH_EXISTING_TYPE","EXISTING_ALL","EXISTING_ONLY_ANNOTATION","EXISTING_ONLY_CLOUD","methods","getSSHValue","id","sshs","this","$store","getters","HCI","SSH","find","O","spec","publicKey","undefined","getOsType","vm","metadata","labels","HCI_ANNOTATIONS","OS","getMatchQGA","osType","_QGA_JSON","clone","hasCustomQGA","forEach","match","getSimilarRuncmd","hasInstallAgent","userScript","oldValue","dataFormat","jsyaml","load","e","Error","includes","S","Array","isArray","join","isInstallUSBTablet","inputs","template","domain","devices","isEqual","isEfiEnabled","features","smm","firmware","bootloader","efi","isSecureBoot","secureBoot","getSecretCloudData","secret","getSecret","userData","decodedData","userdata","networkData","networkdata","cloudInitNoCloud","volumes","V","secrets","SECRET","secretName","secretRef","networkDataSecretRef","s","getAccessCredentials","credentials","accessCredentials","annotations","JSON","parse","DYNAMIC_SSHKEYS_NAMES","map","c","source","userPassword","out","username","newPassword","users","sshkeys","Object","keys","data","propagationMethod","qemuGuestAgent","getVolumeClaimTemplates","VOLUME_CLAIM_TEMPLATE","getRootImageId","volume","IMAGE_ID","getSSHFromAnnotation","ids","SSH_NAMES","convertToJson","script","getSSHFromUserData","ssh_authorized_keys","compareSSHValue","a","b","r","replace","mergeAllSSHs","length","allSSHs","hasSSHResource","ssh","_userDataSSH","sshValue","push","MANAGEMENT_NETWORK","label","value","CD_ROM","HARD_DISK","mixins","impl","props","required","resource","String","fetch","hash","pvcs","dispatch","PVC","storageClasses","STORAGE_CLASS","settings","SETTING","images","IMAGE","versions","VM_VERSION","templates","VM_TEMPLATE","networkAttachment","NETWORK_ATTACHMENT","vmis","VMI","vmims","VMIM","vms","VM","NODE","nodes","allHash","isClone","realMode","_CLONE","sshKey","runStrategy","installAgent","hasCreateVolumes","installUSBTablet","networkScript","imageId","diskRows","networkRows","machineType","showAdvanced","deleteAgent","memory","cpu","reservedMemory","efiEnabled","userDataTemplateId","computed","nodesIdOptions","filter","N","isUnSchedulable","node","nameDisplay","defaultStorageClass","defaultStorage","isDefault","storageClassSetting","storageClassValue","HCI_SETTING","DEFAULT_STORAGE_CLASS","customDefaultStorageClass","storageClass","customVolumeMode","volumeMode","customAccessMode","accessModes","isWindows","needNewSecret","isCreate","created","getInitConfig","config","BACKUP","status","resources","limits","requests","cores","VM_RESERVED_MEMORY","getDiskRows","getNetworkRows","getHasCreatedVolumes","secretBackups","secretNetworkData","secretUserData","base64Decode","getInitUserData","prototype","hasOwnProperty","call","running","$set","namespace","_volumes","_disks","disks","_volumeClaimTemplates","randomStr","SOURCE_TYPE","accessMode","volumeName","size","storageClassName","image","DISK","index","realName","container","hotpluggable","cdrom","containerDisk","CONTAINER","persistentVolumeClaim","claimName","DVT","T","NEW","dataVolumeSpecPVC","storage","allPVCs","pvcResource","ATTACH_VOLUME","disk","bootOrder","parseValue","parseSi","formatSize","formatSi","increment","addSuffix","maxExponent","minExponent","allVolumeStatus","VM_VOLUME_STATUS","volumeStatus","sortBy","networks","interfaces","I","network","sriov","bridge","isPod","pod","model","networkName","multus","parseVM","parseOther","parseAccessCredentials","parseNetworkRows","parseDiskRows","machine","diskNameLables","volumeClaimTemplates","R","prefixName","dataVolumeName","toLowerCase","_disk","parseDisk","_volume","parseVolume","_dataVolumeTemplate","parseVolumeClaimTemplate","generateSecretName","secretNamePrefix","D","stringify","VM_NAME","isSingle","multiVMScheduler","NETWORK_IPS","networkIps","CREATOR","VM_NAME_PREFIX","namePrefix","rule","weight","podAffinityTerm","topologyKey","HOSTNAME","labelSelector","matchLabels","affinity","podAntiAffinity","preferredDuringSchedulingIgnoredDuringExecution","networkRow","_network","parseNetwork","_interface","parseInterface","DYNAMIC_SSHKEYS_USERS","row","ACCESS_CREDENTIALS","RESET_PWD","INJECT_SSH","sshPublicKey","from","Set","dump","getUserData","userDataDoc","YAML","parseDocument","allSSHAuthorizedKeys","mergeSSHAuthorizedKeys","setIn","isCollection","getIn","deleteIn","mergeQGA","deleteQGA","userDataYaml","toString","console","error","updateSSHKey","neu","updateCpuMemory","getSSHListValue","arr","macAddress","updateUserData","updateNetworkData","yaml","sshAuthorizedKeys","get","toJSON","sshList","deleteYamlDocProp","doc","paths","item","items","key","hasCloudConfigComment","commentBefore","isMatchProp","userDataYAML","userDataJSON","findIndex","hasSameRuncmd","hasSimilarRuncmd","deletePackage","userDataTemplateValue","CONFIG_MAP","cloudInit","templateHasQGAPackage","i","splice","getOwnerReferencesFromVM","kind","apiVersion","uid","saveSecret","CLOUD_INIT","ownerReferences","setData","save","Promise","reject","saveAccessCredentials","toSave","secretId","keypair","getAccessCredentialsValidation","errors","fieldName","t","message","val","handlerUSBTablet","hasExist","assign","$delete","setBootMethod","boot","set","deleteSSHFromUserData","userDataJson","isEmpty","refreshYamlEditor","$nextTick","$refs","yamlEditor","updateValue","toggleAdvanced","updateAgent","updateDataTemplateId","oldInstallAgent","updateReserved","watch","handler","old","imageOSType","oldImageId","immediate","deep","_diff","difference","isEdit"],"mappings":"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","file":"harvester-v1.0.3.umd.min.detail~edit~formatters.js","sourcesContent":["import jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport { clone } from '@shell/utils/object';\nimport { SECRET } from '@shell/config/types';\nimport { HCI } from '../../types';\nimport { HCI as HCI_ANNOTATIONS } from '@shell/config/labels-annotations';\nimport { OS } from './index';\n\nexport const QGA_JSON = {\n  package_update: true,\n  packages:       ['qemu-guest-agent'],\n  runcmd:         [\n    [\n      'systemctl',\n      'enable',\n      '--now',\n      'qemu-guest-agent.service'\n    ]\n  ]\n};\n\nexport const QGA_MAP = { default: 'qemu-guest-agent.service' };\n\nexport const USB_TABLET = [{\n  bus:  'usb',\n  name: 'tablet',\n  type: 'tablet'\n}];\n\nexport const SSH_EXISTING_TYPE = {\n  EXISTING_ALL:             'EXISTING_ALL',\n  EXISTING_ONLY_ANNOTATION: 'EXISTING_ANNOTATION',\n  EXISTING_ONLY_CLOUD:      'EXISTING_CLOUD',\n};\n\nexport default {\n  methods: {\n    getSSHValue(id) {\n      const sshs = this.$store.getters['harvester/all'](HCI.SSH) || [];\n\n      return sshs.find( O => O.id === id)?.spec?.publicKey || undefined;\n    },\n\n    getOsType(vm) {\n      return vm.metadata?.labels?.[HCI_ANNOTATIONS.OS];\n    },\n\n    getMatchQGA(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n      let hasCustomQGA = false;\n\n      OS.forEach((O) => {\n        if (O.match) {\n          hasCustomQGA = O.match.find(type => type === osType);\n        }\n      });\n\n      if (hasCustomQGA) {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP[osType];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      }\n\n      return _QGA_JSON;\n    },\n\n    getSimilarRuncmd(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n\n      if (osType === 'openSUSE') {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['suse'];\n      }\n\n      return _QGA_JSON.runcmd[0];\n    },\n\n    hasInstallAgent(userScript, osType, oldValue) {\n      let dataFormat = {};\n      const _QGA_JSON = this.getMatchQGA(osType);\n\n      try {\n        dataFormat = jsyaml.load(userScript) || {};\n      } catch (e) {\n        new Error('Function(hasInstallAgent) error');\n\n        return oldValue;\n      }\n\n      return dataFormat?.packages?.includes('qemu-guest-agent') && !!dataFormat?.runcmd?.find( S => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n    },\n\n    isInstallUSBTablet(spec) {\n      const inputs = spec?.template?.spec?.domain?.devices?.inputs;\n\n      if (Array.isArray(inputs)) {\n        return !!inputs.find((O) => {\n          return isEqual(O, USB_TABLET[0]);\n        });\n      } else {\n        return false;\n      }\n    },\n\n    isEfiEnabled(spec) {\n      return !!(spec?.template?.spec?.domain?.features?.smm && spec?.template?.spec?.domain?.firmware?.bootloader?.efi);\n    },\n\n    isSecureBoot(spec) {\n      return !!spec?.template?.spec?.domain?.firmware?.bootloader?.efi?.secureBoot;\n    },\n\n    getSecretCloudData(spec, type) {\n      const secret = this.getSecret(spec);\n\n      const userData = secret?.decodedData?.userdata;\n      const networkData = secret?.decodedData?.networkdata;\n\n      return { userData, networkData };\n    },\n\n    getSecret(spec) {\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n      const secrets = this.$store.getters['harvester/all'](SECRET) || [];\n\n      const secretName = cloudInitNoCloud?.secretRef?.name || cloudInitNoCloud?.networkDataSecretRef?.name;\n\n      const secret = secrets.find(s => s.metadata.name === secretName);\n\n      return secret;\n    },\n\n    getAccessCredentials(spec) {\n      const secrets = this.$store.getters['harvester/all'](SECRET) || [];\n      const credentials = spec?.template?.spec?.accessCredentials || [];\n      const annotations = JSON.parse(spec.template.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] || '[]');\n\n      return credentials.map((c) => {\n        const source = !!c.userPassword ? 'userPassword' : 'sshPublicKey';\n        const secretName = c[source]?.source?.secret?.secretName;\n        const secretRef = secrets.find(s => s.metadata.name === secretName);\n        const out = {\n          source, username: '', newPassword: '', users: [], sshkeys: [], secretName, secretRef\n        };\n\n        if (!secretRef) {\n          out.secretRef = undefined;\n        } else if (source === 'userPassword') {\n          const username = Object.keys(secretRef?.data)[0];\n          const newPassword = secretRef.decodedData[username];\n\n          out.username = username;\n          out.newPassword = newPassword;\n        } else {\n          const users = c[source].propagationMethod.qemuGuestAgent.users;\n          const sshkeys = annotations?.[secretName];\n\n          out.users = users;\n          out.sshkeys = sshkeys;\n        }\n\n        return out;\n      });\n    },\n\n    getVolumeClaimTemplates(vm) {\n      let out = [];\n\n      try {\n        out = JSON.parse(vm.metadata.annotations[HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]);\n      } catch (e) {\n        new Error(`Function: getVolumeClaimTemplates, ${ e }`);\n      }\n\n      return out;\n    },\n\n    getRootImageId(vm) {\n      const volume = this.getVolumeClaimTemplates(vm);\n\n      return volume[0]?.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] || '';\n    },\n\n    getSSHFromAnnotation(spec) {\n      const ids = spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.SSH_NAMES] || '[]';\n\n      return JSON.parse(ids);\n    },\n\n    convertToJson(script = '') {\n      let out = {};\n\n      try {\n        out = jsyaml.load(script);\n      } catch (e) {\n        new Error('Function(convertToJson) error');\n      }\n\n      return out;\n    },\n\n    getSSHFromUserData(userData) {\n      return this.convertToJson(userData)?.ssh_authorized_keys || [];\n    },\n\n    compareSSHValue(a = '', b = '') {\n      const r = /(\\r\\n\\t|\\n|\\r\\t)|(\\s*)/gm;\n\n      return a.replace(r, '') === b.replace(r, '');\n    },\n\n    mergeAllSSHs(spec) {\n      const keys = this.getSSHFromAnnotation(spec);\n      const { userScript: userData } = this.getSecretCloudData(spec);\n\n      if (!keys?.length < 0 && !userData) {\n        return [];\n      }\n\n      let out = [];\n\n      const allSSHs = this.$store.getters['harvester/all'](HCI.SSH) || [];\n\n      out = (keys || []).map((id) => {\n        const hasSSHResource = allSSHs.find(ssh => ssh.id === id);\n\n        if (hasSSHResource) {\n          return {\n            id:    hasSSHResource.id,\n            data:  hasSSHResource,\n            type:  SSH_EXISTING_TYPE.EXISTING_ALL\n          };\n        } else {\n          return {\n            id,\n            data:  id,\n            type:  SSH_EXISTING_TYPE.EXISTING_ONLY_ANNOTATION\n          };\n        }\n      });\n\n      const _userDataSSH = this.getSSHFromUserData(userData);\n\n      _userDataSSH.map( (sshValue) => {\n        const hasSSHResource = allSSHs.find(ssh => this.compareSSHValue(sshValue, ssh.spec?.publicKey));\n\n        if (hasSSHResource && !out.find(O => O.id === hasSSHResource.id)) {\n          out.push({\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          });\n        } else if (!hasSSHResource) {\n          out.push({\n            id:   'Unknown',\n            data: sshValue,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_CLOUD\n          });\n        }\n      });\n\n      return out;\n    },\n  },\n};\n","import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport difference from 'lodash/difference';\n\nimport { sortBy } from '@shell/utils/sort';\nimport { set } from '@shell/utils/object';\n\nimport { allHash } from '@shell/utils/promise';\nimport { randomStr } from '@shell/utils/string';\nimport { base64Decode } from '@shell/utils/crypto';\nimport { formatSi, parseSi } from '@shell/utils/units';\nimport { SOURCE_TYPE, ACCESS_CREDENTIALS } from '../../config/harvester-map';\nimport { _CLONE } from '@shell/config/query-params';\nimport {\n  PVC, STORAGE_CLASS, NODE, SECRET, CONFIG_MAP, NETWORK_ATTACHMENT\n} from '@shell/config/types';\nimport { HCI } from '../../types';\nimport { HCI_SETTING } from '../../config/settings';\nimport { HCI as HCI_ANNOTATIONS, HOSTNAME } from '@shell/config/labels-annotations';\nimport impl, { QGA_JSON, USB_TABLET } from './impl';\n\nexport const MANAGEMENT_NETWORK = 'management Network';\n\nexport const OS = [{\n  label: 'Windows',\n  value: 'windows'\n}, {\n  label: 'Linux',\n  value: 'linux'\n}, {\n  label: 'Debian',\n  value: 'debian'\n}, {\n  label: 'Fedora',\n  value: 'fedora'\n}, {\n  label: 'Gentoo',\n  value: 'gentoo'\n}, {\n  label: 'Mandriva',\n  value: 'mandriva'\n}, {\n  label: 'Oracle',\n  value: 'oracle'\n}, {\n  label: 'Red Hat',\n  value: 'redhat'\n}, {\n  label: 'openSUSE',\n  value: 'openSUSE',\n}, {\n  label: 'Turbolinux',\n  value: 'turbolinux'\n}, {\n  label: 'Ubuntu',\n  value: 'ubuntu'\n}, {\n  label: 'Xandros',\n  value: 'xandros'\n}, {\n  label: 'Other Linux',\n  match: ['centos'],\n  value: 'otherLinux'\n}];\n\nexport const CD_ROM = 'cd-rom';\nexport const HARD_DISK = 'disk';\n\nexport default {\n  mixins: [impl],\n\n  props: {\n    value: {\n      type:     Object,\n      required: true,\n    },\n\n    resource: {\n      type:    String,\n      default: ''\n    }\n  },\n\n  async fetch() {\n    const hash = {\n      pvcs:               this.$store.dispatch('harvester/findAll', { type: PVC }),\n      storageClasses:     this.$store.dispatch('harvester/findAll', { type: STORAGE_CLASS }),\n      sshs:               this.$store.dispatch('harvester/findAll', { type: HCI.SSH }),\n      settings:           this.$store.dispatch('harvester/findAll', { type: HCI.SETTING }),\n      images:             this.$store.dispatch('harvester/findAll', { type: HCI.IMAGE }),\n      versions:           this.$store.dispatch('harvester/findAll', { type: HCI.VM_VERSION }),\n      templates:          this.$store.dispatch('harvester/findAll', { type: HCI.VM_TEMPLATE }),\n      networkAttachment:  this.$store.dispatch('harvester/findAll', { type: NETWORK_ATTACHMENT }),\n      vmis:               this.$store.dispatch('harvester/findAll', { type: HCI.VMI }),\n      vmims:              this.$store.dispatch('harvester/findAll', { type: HCI.VMIM }),\n      vms:                this.$store.dispatch('harvester/findAll', { type: HCI.VM }),\n      secrets:            this.$store.dispatch('harvester/findAll', { type: SECRET }),\n    };\n\n    if (this.$store.getters['harvester/schemaFor'](NODE)) {\n      hash.nodes = this.$store.dispatch('harvester/findAll', { type: NODE });\n    }\n    await allHash(hash);\n  },\n\n  data() {\n    const isClone = this.realMode === _CLONE;\n\n    return {\n      OS,\n      isClone,\n      spec:               null,\n      osType:             'linux',\n      sshKey:             [],\n      runStrategy:        'RerunOnFailure',\n      installAgent:       true,\n      hasCreateVolumes:   [],\n      installUSBTablet:   true,\n      networkScript:      '',\n      userScript:         '',\n      imageId:            '',\n      diskRows:           [],\n      networkRows:        [],\n      machineType:        '',\n      secretName:         '',\n      secretRef:          null,\n      showAdvanced:       false,\n      deleteAgent:        true,\n      memory:             null,\n      cpu:                '',\n      reservedMemory:     null,\n      accessCredentials:  [],\n      efiEnabled:         false,\n      secureBoot:         false,\n      userDataTemplateId: '',\n    };\n  },\n\n  computed: {\n    images() {\n      return this.$store.getters['harvester/all'](HCI.IMAGE);\n    },\n\n    versions() {\n      return this.$store.getters['harvester/all'](HCI.VM_VERSION);\n    },\n\n    templates() {\n      return this.$store.getters['harvester/all'](HCI.VM_TEMPLATE);\n    },\n\n    pvcs() {\n      return this.$store.getters['harvester/all'](PVC);\n    },\n\n    secrets() {\n      return this.$store.getters['harvester/all'](SECRET);\n    },\n\n    nodesIdOptions() {\n      const nodes = this.$store.getters['harvester/all'](NODE);\n\n      return nodes.filter(N => !N.isUnSchedulable).map((node) => {\n        return {\n          label: node.nameDisplay,\n          value: node.id\n        };\n      });\n    },\n\n    defaultStorageClass() {\n      const defaultStorage = this.$store.getters['harvester/all'](STORAGE_CLASS).find( O => O.isDefault);\n\n      return defaultStorage?.metadata?.name || 'longhorn';\n    },\n\n    storageClassSetting() {\n      try {\n        const storageClassValue = this.$store.getters['harvester/all'](HCI.SETTING).find( O => O.id === HCI_SETTING.DEFAULT_STORAGE_CLASS)?.value;\n\n        return JSON.parse(storageClassValue);\n      } catch (e) {\n        return {};\n      }\n    },\n\n    customDefaultStorageClass() {\n      return this.storageClassSetting.storageClass;\n    },\n\n    customVolumeMode() {\n      return this.storageClassSetting.volumeMode || 'Block';\n    },\n\n    customAccessMode() {\n      return this.storageClassSetting.accessModes || 'ReadWriteMany';\n    },\n\n    isWindows() {\n      return this.osType === 'windows';\n    },\n\n    needNewSecret() {\n      // When creating a template it is always necessary to create a new secret.\n      return this.resource === HCI.VM_VERSION || this.isCreate;\n    },\n  },\n\n  async created() {\n    await this.$store.dispatch('harvester/findAll', { type: SECRET });\n\n    this.getInitConfig({ value: this.value });\n  },\n\n  methods: {\n    getInitConfig(config) {\n      const { value } = config;\n\n      const vm = this.resource === HCI.VM ? value : this.resource === HCI.BACKUP ? this.value.status?.source : value.spec.vm;\n\n      const spec = vm?.spec;\n\n      if (!spec) {\n        return;\n      }\n      const resources = spec.template.spec.domain.resources;\n\n      // If the user is created via yaml, there may be no \"resources.limits\": kubectl apply -f https://kubevirt.io/labs/manifests/vm.yaml\n      if (!resources?.limits || (resources?.limits && !resources?.limits?.memory && resources?.limits?.memory !== null)) {\n        spec.template.spec.domain.resources = {\n          ...spec.template.spec.domain.resources,\n          limits: {\n            ...spec.template.spec.domain.resources.limits,\n            memory: spec.template.spec.domain.resources.requests.memory\n          }\n        };\n      }\n\n      const runStrategy = spec.runStrategy || 'RerunOnFailure';\n      const machineType = value.machineType;\n      const cpu = spec.template.spec.domain?.cpu?.cores;\n      const memory = spec.template.spec.domain.resources.limits.memory;\n      const reservedMemory = vm.metadata?.annotations?.[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n\n      const sshKey = this.getSSHFromAnnotation(spec) || [];\n\n      const imageId = this.getRootImageId(vm) || '';\n      const diskRows = this.getDiskRows(vm);\n      const networkRows = this.getNetworkRows(vm);\n      const hasCreateVolumes = this.getHasCreatedVolumes(spec) || [];\n\n      let { userData = undefined, networkData = undefined } = this.getSecretCloudData(spec);\n\n      if (this.resource === HCI.BACKUP) {\n        const secretBackups = this.value.status?.secretBackups;\n\n        if (secretBackups) {\n          const secretNetworkData = secretBackups[0]?.data?.networkdata || '';\n          const secretUserData = secretBackups[0]?.data?.userdata || '';\n\n          userData = base64Decode(secretUserData);\n          networkData = base64Decode(secretNetworkData);\n        }\n      }\n      const osType = this.getOsType(vm) || 'linux';\n\n      userData = this.isCreate ? this.getInitUserData({ osType }) : userData;\n      const installUSBTablet = this.isInstallUSBTablet(spec);\n      const installAgent = this.isCreate ? true : this.hasInstallAgent(userData, osType, true);\n      const efiEnabled = this.isEfiEnabled(spec);\n      const secureBoot = this.isSecureBoot(spec);\n\n      const secretRef = this.getSecret(spec);\n      const accessCredentials = this.getAccessCredentials(spec);\n\n      if (Object.prototype.hasOwnProperty.call(spec, 'running')) {\n        delete spec.running;\n        spec.runStrategy = 'RerunOnFailure';\n      }\n\n      this.$set(this, 'spec', spec);\n      this.$set(this, 'runStrategy', runStrategy);\n      this.$set(this, 'secretRef', secretRef);\n      this.$set(this, 'accessCredentials', accessCredentials);\n      this.$set(this, 'userScript', userData);\n      this.$set(this, 'networkScript', networkData);\n\n      this.$set(this, 'sshKey', sshKey);\n      this.$set(this, 'osType', osType);\n      this.$set(this, 'installAgent', installAgent);\n\n      this.$set(this, 'cpu', cpu);\n      this.$set(this, 'memory', memory);\n      this.$set(this, 'reservedMemory', reservedMemory);\n      this.$set(this, 'machineType', machineType);\n\n      this.$set(this, 'installUSBTablet', installUSBTablet);\n      this.$set(this, 'efiEnabled', efiEnabled);\n      this.$set(this, 'secureBoot', secureBoot);\n\n      this.$set(this, 'hasCreateVolumes', hasCreateVolumes);\n      this.$set(this, 'networkRows', networkRows);\n      this.$set(this, 'imageId', imageId);\n\n      this.$set(this, 'diskRows', diskRows);\n    },\n\n    getDiskRows(vm) {\n      const namespace = vm.metadata.namespace;\n      const _volumes = vm.spec.template.spec.volumes || [];\n      const _disks = vm.spec.template.spec.domain.devices.disks || [];\n      const _volumeClaimTemplates = this.getVolumeClaimTemplates(vm);\n\n      let out = [];\n\n      if (_disks.length === 0) {\n        out.push({\n          id:               randomStr(5),\n          source:           SOURCE_TYPE.IMAGE,\n          name:             'disk-0',\n          accessMode:       'ReadWriteMany',\n          bus:              'virtio',\n          volumeName:       '',\n          size:             '10Gi',\n          type:             HARD_DISK,\n          storageClassName: '',\n          image:            this.imageId,\n          volumeMode:       'Block',\n        });\n      } else {\n        out = _disks.map( (DISK, index) => {\n          const volume = _volumes.find( V => V.name === DISK.name );\n\n          let size = '';\n          let image = '';\n          let source = '';\n          let realName = '';\n          let container = '';\n          let volumeName = '';\n          let accessMode = '';\n          let volumeMode = '';\n          let storageClassName = '';\n          let hotpluggable = false;\n\n          const type = DISK?.cdrom ? CD_ROM : HARD_DISK;\n\n          if (volume?.containerDisk) { // SOURCE_TYPE.CONTAINER\n            source = SOURCE_TYPE.CONTAINER;\n            container = volume.containerDisk.image;\n          }\n\n          if (volume.persistentVolumeClaim && volume.persistentVolumeClaim?.claimName) {\n            volumeName = volume.persistentVolumeClaim.claimName;\n            const DVT = _volumeClaimTemplates.find( T => T.metadata.name === volumeName);\n\n            realName = volumeName;\n            // If the DVT can be found, it cannot be an existing volume\n            if (DVT) {\n              // has annotation (HCI_ANNOTATIONS.IMAGE_ID) => SOURCE_TYPE.IMAGE\n              if (DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] !== undefined) {\n                image = DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID];\n                source = SOURCE_TYPE.IMAGE;\n              } else {\n                source = SOURCE_TYPE.NEW;\n              }\n\n              const dataVolumeSpecPVC = DVT?.spec || {};\n\n              volumeMode = dataVolumeSpecPVC?.volumeMode;\n              accessMode = dataVolumeSpecPVC?.accessModes?.[0];\n              size = dataVolumeSpecPVC?.resources?.requests?.storage || '10Gi';\n              storageClassName = dataVolumeSpecPVC?.storageClassName;\n            } else { // SOURCE_TYPE.ATTACH_VOLUME\n              const allPVCs = this.$store.getters['harvester/all'](PVC);\n              const pvcResource = allPVCs.find( O => O.id === `${ namespace }/${ volume?.persistentVolumeClaim?.claimName }`);\n\n              source = SOURCE_TYPE.ATTACH_VOLUME;\n              accessMode = pvcResource?.spec?.accessModes?.[0] || 'ReadWriteMany';\n              size = pvcResource?.spec?.resources?.requests?.storage || '10Gi';\n              storageClassName = pvcResource?.spec?.storageClassName;\n              volumeMode = pvcResource?.spec?.volumeMode || 'Block';\n              volumeName = pvcResource?.metadata?.name || '';\n            }\n\n            hotpluggable = volume.persistentVolumeClaim.hotpluggable || false;\n          }\n\n          const bus = DISK?.disk?.bus || DISK?.cdrom?.bus;\n\n          const bootOrder = DISK?.bootOrder ? DISK?.bootOrder : index;\n\n          const parseValue = parseSi(size);\n\n          const formatSize = formatSi(parseValue, {\n            increment:   1024,\n            addSuffix:   false,\n            maxExponent: 3,\n            minExponent: 3,\n          });\n\n          const allVolumeStatus = JSON.parse(vm.metadata?.annotations?.[HCI_ANNOTATIONS.VM_VOLUME_STATUS] || '[]');\n          const volumeStatus = allVolumeStatus.find(volume => realName === volume.name);\n\n          return {\n            id:           randomStr(5),\n            bootOrder,\n            source,\n            name:          DISK.name,\n            realName,\n            bus,\n            volumeName,\n            container,\n            accessMode,\n            size:       `${ formatSize }Gi`,\n            volumeMode:    volumeMode || this.customVolumeMode,\n            image,\n            type,\n            storageClassName,\n            hotpluggable,\n            volumeStatus,\n          };\n        });\n      }\n\n      out = sortBy(out, 'bootOrder');\n\n      return out.filter( O => O.name !== 'cloudinitdisk');\n    },\n\n    getNetworkRows(vm) {\n      const networks = vm.spec.template.spec.networks || [];\n      const interfaces = vm.spec.template.spec.domain.devices.interfaces || [];\n\n      const out = interfaces.map( (I, index) => {\n        const network = networks.find( N => I.name === N.name);\n\n        const type = I.sriov ? 'sriov' : I.bridge ? 'bridge' : 'masquerade';\n\n        const isPod = !!network.pod;\n\n        return {\n          ...I,\n          index,\n          type,\n          isPod,\n          model:        I.model,\n          networkName:  isPod ? MANAGEMENT_NETWORK : network?.multus?.networkName,\n        };\n      });\n\n      return out;\n    },\n\n    parseVM() {\n      this.parseOther();\n      this.parseAccessCredentials();\n      this.parseNetworkRows(this.networkRows);\n      this.parseDiskRows(this.diskRows);\n    },\n\n    parseOther() {\n      if (!this.spec.template.spec.domain.machine) {\n        this.$set(this.spec.template.spec.domain, 'machine', { type: this.machineType });\n      } else {\n        this.$set(this.spec.template.spec.domain.machine, 'type', this.machineType);\n      }\n\n      this.spec.template.spec.domain.cpu.cores = this.cpu;\n      this.spec.template.spec.domain.resources.limits.cpu = this.cpu;\n      this.spec.template.spec.domain.resources.limits.memory = this.memory;\n\n      // parse reserved memory\n      const vm = this.resource === HCI.VM ? this.value : this.value.spec.vm;\n\n      if (!this.reservedMemory) {\n        delete vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      } else {\n        vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY] = this.reservedMemory;\n      }\n    },\n\n    parseDiskRows(disk) {\n      const disks = [];\n      const volumes = [];\n      const diskNameLables = [];\n      const volumeClaimTemplates = [];\n\n      disk.forEach( (R, index) => {\n        const prefixName = this.value.metadata?.name || '';\n\n        let dataVolumeName = '';\n\n        if (R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n          dataVolumeName = R.volumeName;\n        } else if (this.isClone || !this.hasCreateVolumes.includes(R.realName)) {\n          dataVolumeName = `${ prefixName }-${ R.name }-${ randomStr(5).toLowerCase() }`;\n        } else {\n          dataVolumeName = R.realName;\n        }\n\n        const _disk = this.parseDisk(R, index);\n        const _volume = this.parseVolume(R, dataVolumeName);\n        const _dataVolumeTemplate = this.parseVolumeClaimTemplate(R, dataVolumeName);\n\n        disks.push(_disk);\n        volumes.push(_volume);\n        diskNameLables.push(dataVolumeName);\n\n        if (R.source !== SOURCE_TYPE.CONTAINER && R.source !== SOURCE_TYPE.ATTACH_VOLUME) {\n          volumeClaimTemplates.push(_dataVolumeTemplate);\n        }\n      });\n\n      if (!this.secretName || this.needNewSecret) {\n        this.secretName = this.generateSecretName(this.secretNamePrefix);\n      }\n\n      if (!disks.find( D => D.name === 'cloudinitdisk')) {\n        if (!this.isWindows) {\n          disks.push({\n            name: 'cloudinitdisk',\n            disk: { bus: 'virtio' }\n          });\n\n          volumes.push({\n            name:             'cloudinitdisk',\n            cloudInitNoCloud: {\n              secretRef:            { name: this.secretName },\n              networkDataSecretRef: { name: this.secretName }\n            }\n          });\n        }\n      }\n\n      let spec = {\n        ...this.spec,\n        runStrategy: this.runStrategy,\n        template:    {\n          ...this.spec.template,\n          metadata: {\n            ...this.spec?.template?.metadata,\n            annotations: {\n              ...this.spec?.template?.metadata?.annotations,\n              [HCI_ANNOTATIONS.SSH_NAMES]: JSON.stringify(this.sshKey)\n            },\n            labels:      {\n              ...this.spec?.template?.metadata?.labels,\n              [HCI_ANNOTATIONS.VM_NAME]: this.value?.metadata?.name,\n            }\n          },\n          spec: {\n            ...this.spec.template?.spec,\n            domain: {\n              ...this.spec.template?.spec?.domain,\n              devices: {\n                ...this.spec.template?.spec?.domain?.devices,\n                disks,\n              },\n            },\n            volumes,\n          }\n        }\n      };\n\n      if (volumes.length === 0) {\n        delete spec.template.spec.volumes;\n      }\n\n      if (this.resource === HCI.VM) {\n        if (!this.isSingle) {\n          spec = this.multiVMScheduler(spec);\n        }\n\n        this.$set(this.value.metadata, 'annotations', {\n          ...this.value.metadata.annotations,\n          [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates),\n          [HCI_ANNOTATIONS.NETWORK_IPS]:           JSON.stringify(this.value.networkIps)\n        });\n\n        this.$set(this.value.metadata, 'labels', {\n          ...this.value.metadata.labels,\n          [HCI_ANNOTATIONS.CREATOR]: 'harvester',\n          [HCI_ANNOTATIONS.OS]:      this.osType\n        });\n\n        this.$set(this.value, 'spec', spec);\n        this.$set(this, 'spec', spec);\n      } else if (this.resource === HCI.VM_VERSION) {\n        this.$set(this.value.spec.vm, 'spec', spec);\n        this.$set(this.value.spec.vm.metadata, 'annotations', { ...this.value.spec.vm.metadata.annotations, [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates) });\n        this.$set(this.value.spec.vm.metadata, 'labels', { [HCI_ANNOTATIONS.OS]: this.osType });\n        this.$set(this, 'spec', spec);\n      }\n    },\n\n    multiVMScheduler(spec) {\n      spec.template.metadata.labels[HCI_ANNOTATIONS.VM_NAME_PREFIX] = this.namePrefix;\n\n      const rule = {\n        weight:          1,\n        podAffinityTerm: {\n          topologyKey:   HOSTNAME,\n          labelSelector: { matchLabels: { [HCI_ANNOTATIONS.VM_NAME_PREFIX]: this.namePrefix } }\n        }\n      };\n\n      return {\n        ...spec,\n        template: {\n          ...spec.template,\n          spec: {\n            ...spec.template.spec,\n            affinity: {\n              ...spec.template.spec.affinity,\n              podAntiAffinity: {\n                ...spec.template.spec?.affinity?.podAntiAffinity,\n                preferredDuringSchedulingIgnoredDuringExecution: [\n                  ...(spec.template.spec?.affinity?.podAntiAffinity?.preferredDuringSchedulingIgnoredDuringExecution || []),\n                  rule\n                ]\n              }\n            }\n          }\n        }\n      };\n    },\n\n    parseNetworkRows(networkRow) {\n      const networks = [];\n      const interfaces = [];\n\n      networkRow.forEach( (R) => {\n        const _network = this.parseNetwork(R);\n        const _interface = this.parseInterface(R);\n\n        networks.push(_network);\n        interfaces.push(_interface);\n      });\n\n      const spec = {\n        ...this.spec.template.spec,\n        domain: {\n          ...this.spec.template.spec.domain,\n          devices: {\n            ...this.spec.template.spec.domain.devices,\n            interfaces,\n          },\n        },\n        networks\n      };\n\n      this.$set(this.spec.template, 'spec', spec);\n    },\n\n    parseAccessCredentials() {\n      const out = [];\n      const annotations = {};\n      const users = JSON.parse(this.spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] || '[]');\n\n      for (const row of this.accessCredentials) {\n        if (this.needNewSecret) {\n          row.secretName = this.generateSecretName(this.secretNamePrefix);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          users.push(row.username);\n          out.push({\n            userPassword: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { } }\n            }\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          users.push(...row.users);\n          annotations[row.secretName] = row.sshkeys;\n          out.push({\n            sshPublicKey: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { users: row.users } }\n            }\n          });\n        }\n      }\n\n      if (out.length === 0 && !!this.spec.template.spec.accessCredentials) {\n        delete this.spec.template.spec.accessCredentials;\n      } else {\n        this.spec.template.spec.accessCredentials = out;\n      }\n\n      if (users.length !== 0) {\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] = JSON.stringify(Array.from(new Set(users)));\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] = JSON.stringify(annotations);\n      }\n    },\n\n    getInitUserData(config) {\n      const _QGA_JSON = this.getMatchQGA(config.osType);\n\n      const out = jsyaml.dump(_QGA_JSON);\n\n      return `#cloud-config\\n${ out }`;\n    },\n\n    /**\n     * Generate user data yaml which is decide by the \"Install guest agent\",\n     * \"OS type\", \"SSH Keys\" and user input.\n     * @param config\n     */\n    getUserData(config) {\n      try {\n        // https://github.com/eemeli/yaml/issues/136\n        let userDataDoc = this.userScript ? YAML.parseDocument(this.userScript) : YAML.parseDocument({});\n\n        const allSSHAuthorizedKeys = this.mergeSSHAuthorizedKeys(this.userScript);\n\n        if (allSSHAuthorizedKeys.length > 0) {\n          userDataDoc.setIn(['ssh_authorized_keys'], allSSHAuthorizedKeys);\n        } else if (YAML.isCollection(userDataDoc.getIn('ssh_authorized_keys'))) {\n          userDataDoc.deleteIn(['ssh_authorized_keys']);\n        }\n\n        userDataDoc = config.installAgent ? this.mergeQGA({ userDataDoc, ...config }) : this.deleteQGA({ userDataDoc, ...config });\n        const userDataYaml = userDataDoc.toString();\n\n        if (userDataYaml === '{}\\n') {\n          // When the YAML parsed value is '{}\\n', it means that the userData is empty, then undefined is returned.\n          return undefined;\n        }\n\n        return userDataYaml;\n      } catch (e) {\n        console.error('Error: Unable to parse yaml document', e); // eslint-disable-line no-console\n\n        return this.userScript;\n      }\n    },\n\n    updateSSHKey(neu) {\n      this.$set(this, 'sshKey', neu);\n    },\n\n    updateCpuMemory(cpu, memory) {\n      this.$set(this, 'cpu', cpu);\n      this.$set(this, 'memory', memory);\n    },\n\n    parseDisk(R, index) {\n      const out = { name: R.name };\n\n      if (R.type === HARD_DISK) {\n        out.disk = { bus: R.bus };\n      } else if (R.type === CD_ROM) {\n        out.cdrom = { bus: R.bus };\n      }\n\n      out.bootOrder = index + 1;\n\n      return out;\n    },\n\n    parseVolume(R, dataVolumeName) {\n      const out = { name: R.name };\n\n      if (R.source === SOURCE_TYPE.CONTAINER) {\n        out.containerDisk = { image: R.container };\n      } else if (R.source === SOURCE_TYPE.IMAGE || R.source === SOURCE_TYPE.NEW || R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n        out.persistentVolumeClaim = { claimName: dataVolumeName };\n        if (R.hotpluggable) {\n          out.persistentVolumeClaim.hotpluggable = true;\n        }\n      }\n\n      return out;\n    },\n\n    parseVolumeClaimTemplate(R, dataVolumeName) {\n      if (!String(R.size).includes('Gi') && R.size) {\n        R.size = `${ R.size }Gi`;\n      }\n\n      const out = {\n        metadata:   { name: dataVolumeName },\n        spec:       {\n          accessModes: [R.accessMode],\n          resources:   { requests: { storage: R.size } },\n          volumeMode:  R.volumeMode\n        }\n      };\n\n      switch (R.source) {\n      case SOURCE_TYPE.NEW:\n        out.spec.storageClassName = R.storageClassName || this.customDefaultStorageClass || this.defaultStorageClass;\n        break;\n      case SOURCE_TYPE.IMAGE: {\n        const image = this.images.find( I => R.image === I.id);\n\n        if (image) {\n          out.spec.storageClassName = `longhorn-${ image.metadata.name }`;\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: image.id };\n        } else if (this.resource === HCI.VM_VERSION) {\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: '' };\n        }\n\n        break;\n      }\n      }\n\n      return out;\n    },\n\n    getSSHListValue(arr) {\n      return arr.map( id => this.getSSHValue(id)).filter( O => O !== undefined);\n    },\n\n    parseInterface(R) {\n      const _interface = {};\n      const type = R.type;\n\n      _interface[type] = {};\n\n      if (R.macAddress) {\n        _interface.macAddress = R.macAddress;\n      }\n\n      _interface.model = R.model;\n      _interface.name = R.name;\n\n      return _interface;\n    },\n\n    parseNetwork(R) {\n      const out = { name: R.name };\n\n      if (R.isPod) {\n        out.pod = {};\n      } else {\n        out.multus = { networkName: R.networkName };\n      }\n\n      return out;\n    },\n\n    updateUserData(value) {\n      this.userScript = value;\n    },\n\n    updateNetworkData(value) {\n      this.networkScript = value;\n    },\n\n    mergeSSHAuthorizedKeys(yaml) {\n      try {\n        const sshAuthorizedKeys = YAML.parseDocument(yaml)\n          .get('ssh_authorized_keys')\n          ?.toJSON() || [];\n\n        const sshList = this.getSSHListValue(this.sshKey);\n\n        return sshAuthorizedKeys.length ? [...new Set([...sshList, ...sshAuthorizedKeys])] : sshList;\n      } catch (e) {\n        return [];\n      }\n    },\n\n    /**\n     * @param paths A Object path, e.g. 'a.b.c' => ['a', 'b', 'c']. Refer to https://eemeli.org/yaml/#scalar-values\n     * @returns\n     */\n    deleteYamlDocProp(doc, paths) {\n      try {\n        const item = doc.getIn([])?.items[0];\n        const key = item?.key;\n        const hasCloudConfigComment = !!key?.commentBefore?.includes('cloud-config');\n        const isMatchProp = key.source === paths[paths.length - 1];\n\n        if (key && hasCloudConfigComment && isMatchProp) {\n          // Comments are mounted on the next node and we should not delete the node containing cloud-config\n        } else {\n          doc.deleteIn(paths);\n        }\n      } catch (e) {}\n    },\n\n    mergeQGA(config) {\n      const { osType, userDataDoc } = config;\n      const _QGA_JSON = this.getMatchQGA(osType);\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      let packages = userDataJSON?.packages || [];\n      let runcmd = userDataJSON?.runcmd || [];\n\n      userDataDoc.setIn(['package_update'], true);\n\n      if (Array.isArray(packages)) {\n        if (!packages.includes('qemu-guest-agent')) {\n          packages.push('qemu-guest-agent');\n        }\n      } else {\n        packages = QGA_JSON.packages;\n      }\n\n      if (Array.isArray(runcmd)) {\n        let findIndex = -1;\n        const hasSameRuncmd = runcmd.find( S => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n\n        const hasSimilarRuncmd = runcmd.find( (S, index) => {\n          if (Array.isArray(S) && S.join('-') === this.getSimilarRuncmd(osType).join('-')) {\n            findIndex = index;\n\n            return true;\n          }\n\n          return false;\n        });\n\n        if (hasSimilarRuncmd) {\n          runcmd[findIndex] = _QGA_JSON.runcmd[0];\n        } else if (!hasSameRuncmd) {\n          runcmd.push(_QGA_JSON.runcmd[0]);\n        }\n      } else {\n        runcmd = _QGA_JSON.runcmd;\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []); // It needs to be set empty first, as it is possible that cloud-init comments are mounted on this node\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    deleteQGA(config) {\n      const { osType, userDataDoc, deletePackage = false } = config;\n\n      const userDataTemplateValue = this.$store.getters['harvester/byId'](CONFIG_MAP, this.userDataTemplateId)?.data?.cloudInit || '';\n\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      const packages = userDataJSON?.packages || [];\n      const runcmd = userDataJSON?.runcmd || [];\n\n      if (Array.isArray(packages) && deletePackage) {\n        const templateHasQGAPackage = this.convertToJson(userDataTemplateValue);\n\n        for (let i = 0; i < packages.length; i++) {\n          if (packages[i] === 'qemu-guest-agent') {\n            if (!(Array.isArray(templateHasQGAPackage?.packages) && templateHasQGAPackage.packages.includes('qemu-guest-agent'))) {\n              packages.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      if (Array.isArray(runcmd)) {\n        const _QGA_JSON = this.getMatchQGA(osType);\n\n        for (let i = 0; i < runcmd.length; i++) {\n          if (Array.isArray(runcmd[i]) && runcmd[i].join('-') === _QGA_JSON.runcmd[0].join('-')) {\n            runcmd.splice(i, 1);\n          }\n        }\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []);\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    generateSecretName(name) {\n      return name ? `${ name }-${ randomStr(5).toLowerCase() }` : undefined;\n    },\n\n    getOwnerReferencesFromVM(resource) {\n      const name = resource.metadata.name;\n      const kind = resource.kind;\n      const apiVersion = this.resource === HCI.VM ? 'kubevirt.io/v1' : 'harvesterhci.io/v1beta1';\n      const uid = resource?.metadata?.uid;\n\n      return [{\n        name,\n        kind,\n        uid,\n        apiVersion,\n      }];\n    },\n\n    async saveSecret(vm) {\n      if (!vm?.spec || !this.secretName || this.isWindows) {\n        return true;\n      }\n\n      let secret = this.getSecret(vm.spec);\n\n      const userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n\n      if (!secret || this.needNewSecret) {\n        secret = await this.$store.dispatch('harvester/create', {\n          metadata: {\n            name:            this.secretName,\n            namespace:       this.value.metadata.namespace,\n            labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n            ownerReferences: this.getOwnerReferencesFromVM(vm)\n          },\n          type: SECRET\n        });\n      }\n\n      try {\n        if (secret) {\n          secret.setData('userdata', userData);\n          secret.setData('networkdata', this.networkScript);\n\n          await secret.save();\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    async saveAccessCredentials(vm) {\n      if (!vm?.spec) {\n        return true;\n      }\n\n      // save\n      const toSave = [];\n\n      for (const row of this.accessCredentials) {\n        let secretRef = row.secretRef;\n\n        if (!secretRef || this.needNewSecret) {\n          secretRef = await this.$store.dispatch('harvester/create', {\n            metadata: {\n              name:            row.secretName,\n              namespace:       vm.metadata.namespace,\n              labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n              ownerReferences: this.getOwnerReferencesFromVM(vm)\n            },\n            type: SECRET\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          secretRef.setData(row.username, row.newPassword);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          for (const secretId of row.sshkeys) {\n            const keypair = (this.$store.getters['harvester/all'](HCI.SSH) || []).find(s => s.id === secretId);\n\n            secretRef.setData(`${ keypair.metadata.namespace }-${ keypair.metadata.name }`, keypair.spec.publicKey);\n          }\n        }\n\n        toSave.push(secretRef);\n      }\n\n      try {\n        for (const resource of toSave) {\n          await resource.save();\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    getAccessCredentialsValidation() {\n      const errors = [];\n\n      for (let i = 0; i < this.accessCredentials.length; i++) {\n        const row = this.accessCredentials[i];\n        const source = row.source;\n\n        if (source === ACCESS_CREDENTIALS.RESET_PWD) {\n          if (!row.username) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.newPassword) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (row.newPassword && row.newPassword.length < 6) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.number.min', { key: fieldName, val: '6' });\n\n            errors.push(message);\n          }\n        } else {\n          if (!row.users || row.users.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.sshkeys || row.sshkeys.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.sshKeyValue');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n        }\n\n        if (errors.length > 0) {\n          break;\n        }\n      }\n\n      return errors;\n    },\n\n    getHasCreatedVolumes(spec) {\n      const out = [];\n\n      if (spec.template.spec.volumes) {\n        spec.template.spec.volumes.forEach((V) => {\n          if (V?.persistentVolumeClaim?.claimName) {\n            out.push(V.persistentVolumeClaim.claimName);\n          }\n        });\n      }\n\n      return out;\n    },\n\n    handlerUSBTablet(val) {\n      const hasExist = this.isInstallUSBTablet(this.spec);\n      const inputs = this.spec.template.spec.domain.devices?.inputs || [];\n\n      if (val && !hasExist) {\n        if (inputs.length > 0) {\n          inputs.push(USB_TABLET[0]);\n        } else {\n          Object.assign(this.spec.template.spec.domain.devices, {\n            inputs: [\n              USB_TABLET[0]\n            ]\n          });\n        }\n      } else if (!val) {\n        const index = inputs.findIndex(O => isEqual(O, USB_TABLET[0]));\n\n        if (hasExist && inputs.length === 1) {\n          this.$delete(this.spec.template.spec.domain.devices, 'inputs');\n        } else if (hasExist) {\n          inputs.splice(index, 1);\n          this.$set(this.spec.template.spec.domain.devices, 'inputs', inputs);\n        }\n      }\n    },\n\n    setBootMethod(boot = { efi: false, secureBoot: false }) {\n      if (boot.efi && boot.secureBoot) {\n        set(this.spec.template.spec.domain, 'features.smm.enabled', true);\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.secureBoot', true);\n      } else if (boot.efi && !boot.secureBoot) {\n        set(this.spec.template.spec.domain, 'features.smm.enabled', false);\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.secureBoot', false);\n      } else {\n        this.$delete(this.spec.template.spec.domain, 'firmware');\n        this.$delete(this.spec.template.spec.domain.features, 'smm');\n      }\n    },\n\n    deleteSSHFromUserData(ssh = []) {\n      const sshAuthorizedKeys = this.getSSHFromUserData(this.userScript);\n\n      ssh.map((id) => {\n        const index = sshAuthorizedKeys.findIndex(value => value === this.getSSHValue(id));\n\n        if (index >= 0) {\n          sshAuthorizedKeys.splice(index, 1);\n        }\n      });\n\n      const userDataJson = this.convertToJson(this.userScript);\n\n      userDataJson.ssh_authorized_keys = sshAuthorizedKeys;\n\n      if (sshAuthorizedKeys.length === 0) {\n        delete userDataJson.ssh_authorized_keys;\n      }\n\n      if (isEmpty(userDataJson)) {\n        this.$set(this, 'userScript', undefined);\n      } else {\n        this.$set(this, 'userScript', jsyaml.dump(userDataJson));\n      }\n\n      this.refreshYamlEditor();\n    },\n\n    refreshYamlEditor() {\n      this.$nextTick(() => {\n        this.$refs.yamlEditor?.updateValue();\n      });\n    },\n\n    toggleAdvanced() {\n      this.showAdvanced = !this.showAdvanced;\n    },\n\n    updateAgent(value) {\n      if (!value) {\n        this.deletePackage = true;\n      }\n    },\n\n    updateDataTemplateId(type, id) {\n      if (type === 'user') {\n        const oldInstallAgent = this.installAgent;\n\n        this.userDataTemplateId = id;\n        this.$nextTick(() => {\n          if (oldInstallAgent) {\n            this.installAgent = oldInstallAgent;\n          }\n        });\n      }\n    },\n\n    updateReserved(value = {}) {\n      const { memory } = value;\n\n      this.$set(this, 'reservedMemory', memory);\n    },\n  },\n\n  watch: {\n    diskRows: {\n      handler(neu, old) {\n        if (Array.isArray(neu)) {\n          const imageId = neu[0]?.image;\n          const image = this.images.find( I => imageId === I.id);\n          const osType = image?.imageOSType;\n\n          const oldImageId = old[0]?.image;\n\n          if (this.isCreate && oldImageId === imageId && imageId) {\n            this.osType = osType;\n          }\n        }\n      }\n    },\n\n    secretRef: {\n      handler(secret) {\n        if (secret && this.resource !== HCI.BACKUP) {\n          this.userScript = secret?.decodedData?.userdata;\n          this.networkScript = secret?.decodedData?.networkdata;\n          this.secretName = secret?.metadata.name;\n          this.refreshYamlEditor();\n        }\n      },\n      immediate: true,\n      deep:      true\n    },\n\n    isWindows(val) {\n      if (val) {\n        this.$set(this, 'sshKey', []);\n        this.$set(this, 'userScript', undefined);\n        this.$set(this, 'installAgent', false);\n      }\n    },\n\n    installUSBTablet(val) {\n      this.handlerUSBTablet(val);\n    },\n\n    efiEnabled(val) {\n      this.setBootMethod({ efi: val, secureBoot: this.secureBoot });\n    },\n\n    secureBoot(val) {\n      this.setBootMethod({ efi: this.efiEnabled, secureBoot: val });\n    },\n\n    installAgent: {\n      /**\n       * rules\n       * 1. The value in user Data is the first priority\n       * 2. After selecting the template, if checkbox is checked, only merge operation will be performed on user data,\n       *    if checkbox is unchecked, no value will be deleted in user data\n       */\n      handler(neu) {\n        if (this.deleteAgent) {\n          const out = this.getUserData({\n            installAgent: neu, osType: this.osType, deletePackage: this.deletePackage\n          });\n\n          this.$set(this, 'userScript', out);\n          this.refreshYamlEditor();\n        }\n        this.deleteAgent = true;\n        this.deletePackage = false;\n      }\n    },\n\n    osType(neu) {\n      const out = this.getUserData({ installAgent: this.installAgent, osType: neu });\n\n      this.$set(this, 'userScript', out);\n      this.refreshYamlEditor();\n    },\n\n    userScript(neu, old) {\n      const hasInstallAgent = this.hasInstallAgent(neu, this.osType, this.installAgent);\n\n      if (hasInstallAgent !== this.installAgent) {\n        this.deleteAgent = false;\n        this.installAgent = hasInstallAgent;\n      }\n    },\n\n    sshKey(neu, old) {\n      const _diff = difference(old, neu);\n\n      if (_diff.length && this.isEdit) {\n        this.deleteSSHFromUserData(_diff);\n      }\n    }\n  }\n};\n"],"sourceRoot":""}