{"version":3,"sources":["webpack://harvester-v1.2.1//home/runner/work/harvester-dashboard/harvester-dashboard/shell/components/formatter/BadgeStateFormatter.vue","webpack://harvester-v1.2.1/../../shell/components/formatter/BadgeStateFormatter.vue","webpack://harvester-v1.2.1//home/runner/work/harvester-dashboard/harvester-dashboard/shell/components/formatter/BadgeStateFormatter.vue?52ef","webpack://harvester-v1.2.1//home/runner/work/harvester-dashboard/harvester-dashboard/shell/components/formatter/BadgeStateFormatter.vue?8d7d","webpack://harvester-v1.2.1/./mixins/harvester-vm/impl.js","webpack://harvester-v1.2.1/./mixins/harvester-vm/index.js"],"names":["render","_vm","this","_c","_self","arbitrary","value","attrs","stateBackground","stateDisplay","_e","row","staticRenderFns","components","BadgeState","props","type","String","default","Object","required","col","Boolean","data","watch","handler","color","colorForState","replace","immediate","component","QGA_JSON","package_update","packages","runcmd","QGA_MAP","USB_TABLET","bus","name","SSH_EXISTING_TYPE","EXISTING_ALL","EXISTING_ONLY_ANNOTATION","EXISTING_ONLY_CLOUD","methods","hasCloudConfigComment","userScript","_userDataDoc$contents","_userDataDoc$comment","_userDataDoc$commentB","userDataDoc","YAML","parseDocument","items","contents","exist","comment","includes","commentBefore","map","item","_key$commentBefore","key","getSSHValue","id","_sshs$find","_sshs$find$spec","inStore","$store","getters","sshs","HCI","SSH","find","O","spec","publicKey","undefined","getOsType","vm","_vm$metadata","_vm$metadata$labels","metadata","labels","HCI_ANNOTATIONS","OS","getMatchQGA","osType","_QGA_JSON","clone","hasCustomQGA","forEach","match","getSimilarRuncmd","hasInstallAgent","oldValue","_dataFormat","_dataFormat$packages","_dataFormat2","_dataFormat2$runcmd","dataFormat","jsyaml","load","e","Error","S","Array","isArray","join","isInstallUSBTablet","_spec$template","_spec$template$spec","_spec$template$spec$d","_spec$template$spec$d2","inputs","template","domain","devices","isEqual","isEfiEnabled","_spec$template2","_spec$template2$spec","_spec$template2$spec$","_spec$template2$spec$2","_spec$template2$spec$3","firmware","bootloader","efi","isTpmEnabled","_spec$template3","_spec$template3$spec","_spec$template3$spec$","_spec$template3$spec$2","tpm","isSecureBoot","_spec$template4","_spec$template4$spec","_spec$template4$spec$","_spec$template4$spec$2","_spec$template4$spec$3","_spec$template4$spec$4","secureBoot","getCloudInitNoCloud","_secret$decodedData","_secret$decodedData2","_spec$template5","_spec$template5$spec","_spec$template5$spec$","_spec$template5$spec$2","secret","getSecret","userData","decodedData","userdata","networkData","networkdata","cloudInitNoCloud","volumes","V","saveUserDataAsClearText","saveNetworkDataAsClearText","_spec$template6","_spec$template6$spec","_spec$template6$spec$","_spec$template6$spec$2","_cloudInitNoCloud$sec","_cloudInitNoCloud$net","secrets","SECRET","secretName","secretRef","networkDataSecretRef","s","getAccessCredentials","_spec$template7","_spec$template7$spec","_spec$template$metada","_spec$template$metada2","credentials","accessCredentials","annotations","JSON","parse","DYNAMIC_SSHKEYS_NAMES","c","_c$source","_c$source$source","_c$source$source$secr","source","userPassword","out","username","newPassword","users","sshkeys","keys","propagationMethod","qemuGuestAgent","getVolumeClaimTemplates","VOLUME_CLAIM_TEMPLATE","getRootImageId","_volume$","_volume$$metadata","_volume$$metadata$ann","volume","IMAGE_ID","getSSHFromAnnotation","_spec$template8","_spec$template8$metad","_spec$template8$metad2","ids","SSH_NAMES","convertToJson","script","getSSHFromUserData","_this$convertToJson","ssh_authorized_keys","compareSSHValue","a","b","r","mergeAllSSHs","length","allSSHs","hasSSHResource","ssh","_userDataSSH","sshValue","_ssh$spec","push","MANAGEMENT_NETWORK","label","CD_ROM","HARD_DISK","mixins","impl","resource","_res$addons$find","_res$addons$find$spec","hash","pvs","dispatch","PV","pvcs","PVC","storageClasses","STORAGE_CLASS","settings","SETTING","images","IMAGE","versions","VM_VERSION","templates","VM_TEMPLATE","networkAttachment","NETWORK_ATTACHMENT","vmis","VMI","vmims","VMIM","vms","VM","addons","ADD_ONS","NODE","nodes","CLUSTER_NETWORK","clusterNetworks","VLAN_CONFIG","LONGHORN","VOLUMES","longhornVolumes","res","allHash","hasPCISchema","PCI_DEVICE","enabledPCI","addon","enabled","isClone","realMode","_CLONE","sshKey","runStrategy","installAgent","hasCreateVolumes","installUSBTablet","networkScript","imageId","diskRows","networkRows","machineType","showAdvanced","deleteAgent","memory","cpu","reservedMemory","efiEnabled","tpmEnabled","userDataTemplateId","immutableMode","_CREATE","_VIEW","terminationGracePeriodSeconds","computed","filteredNamespaces","NAMESPACE","filter","namespace","isSystem","nodesIdOptions","networkNames","n","networkName","vmNetworks","selectedVMNetworks","uniq","_n$clusterNetworkReso","clusterNetworkResource","N","isUnSchedulable","node","requireLabelKeys","isNetworkSchedule","clusterNetwork","requireLabelKey","_node$metadata","_node$metadata$labels","nameDisplay","t","disabled","defaultStorageClass","_defaultStorage$metad","defaultStorage","isDefault","storageClassSetting","_this$$store$getters$","storageClassValue","HCI_SETTING","DEFAULT_STORAGE_CLASS","customVolumeMode","volumeMode","customAccessMode","accessModes","isWindows","needNewSecret","isCreate","defaultTerminationSetting","setting","VM_TERMINATION_PERIOD","Number","affinityLabels","namespaceInputLabel","namespaceSelectionLabels","addLabel","topologyKeyPlaceholder","getInitConfig","init","config","_this$value$status","_resources$limits","_resources$limits2","_vm$metadata$annotati","existUserData","fromTemplate","BACKUP","status","resources","limits","requests","cores","VM_RESERVED_MEMORY","getDiskRows","getNetworkRows","getHasCreatedVolumes","_this$value$status2","secretBackups","_secretBackups$","_secretBackups$$data","_secretBackups$2","_secretBackups$2$data","secretNetworkData","secretUserData","base64Decode","getInitUserData","prototype","hasOwnProperty","call","running","$set","refreshYamlEditor","_volumes","_disks","disks","_volumeClaimTemplates","randomStr","SOURCE_TYPE","accessMode","volumeName","size","storageClassName","image","DISK","index","_volume$persistentVol","_DISK$disk","_DISK$cdrom","_this$pvcs$find","_this$pvcs$find$relat","_this$pvcs$find$relat2","_this$pvcs$find$relat3","realName","container","hotpluggable","dataSource","cdrom","disk","containerDisk","CONTAINER","persistentVolumeClaim","claimName","DVT","T","_DVT$metadata","_DVT$metadata$annotat","_dataVolumeSpecPVC$ac","_dataVolumeSpecPVC$re","_dataVolumeSpecPVC$re2","_DVT$metadata2","_DVT$metadata2$annota","NEW","dataVolumeSpecPVC","storage","_pvcResource$spec","_pvcResource$spec$acc","_pvcResource$spec2","_pvcResource$spec2$re","_pvcResource$spec2$re2","_pvcResource$spec3","_pvcResource$spec4","_pvcResource$metadata","allPVCs","pvcResource","_volume$persistentVol2","ATTACH_VOLUME","bootOrder","parseValue","parseSi","formatSize","formatSi","increment","addSuffix","maxExponent","minExponent","volumeStatus","P","relatedPV","VOLUME_ERROR","sortBy","networks","interfaces","I","_network$multus","network","sriov","bridge","isPod","pod","newCreateId","model","multus","parseVM","getUserData","parseOther","parseAccessCredentials","parseNetworkRows","parseDiskRows","machine","toString","_this$spec","_this$spec$template","_this$spec2","_this$spec2$template","_this$spec2$template$","_this$spec3","_this$spec3$template","_this$spec3$template$","_this$value","_this$value$metadata2","_this$spec$template2","_this$spec$template3","_this$spec$template3$","_this$spec$template4","_this$spec$template4$","_this$spec$template4$2","diskNameLables","volumeClaimTemplates","R","_this$value$metadata","prefixName","dataVolumeName","toLowerCase","_disk","parseDisk","_volume","parseVolume","_dataVolumeTemplate","parseVolumeClaimTemplate","generateSecretName","secretNamePrefix","D","cloudinitdisk","stringify","VM_NAME","isSingle","multiVMScheduler","NETWORK_IPS","networkIps","CREATOR","removeTrailingHyphen","str","endsWith","slice","_spec$template$spec2","_spec$template$spec2$","_spec$template$spec3","_spec$template$spec3$","_spec$template$spec3$2","namePrefix","VM_NAME_PREFIX","rule","weight","podAffinityTerm","topologyKey","HOSTNAME","labelSelector","matchLabels","affinity","podAntiAffinity","preferredDuringSchedulingIgnoredDuringExecution","networkRow","_network","parseNetwork","_interface","parseInterface","_this$spec4","_this$spec4$template","_this$spec4$template$","_this$spec4$template$2","DYNAMIC_SSHKEYS_USERS","ACCESS_CREDENTIALS","RESET_PWD","INJECT_SSH","sshPublicKey","from","Set","dump","allSSHAuthorizedKeys","mergeSSHAuthorizedKeys","setIn","isCollection","getIn","deleteIn","mergeQGA","deleteQGA","userDataYaml","console","error","updateSSHKey","neu","updateCpuMemory","getSSHListValue","arr","macAddress","updateUserData","updateNetworkData","yaml","_YAML$parseDocument$g","sshAuthorizedKeys","get","toJSON","sshList","deleteYamlDocProp","doc","paths","_doc$getIn","isMatchProp","userDataYAML","userDataJSON","findIndex","hasSameRuncmd","hasSimilarRuncmd","_this$$store$getters$2","_this$$store$getters$3","deletePackage","userDataTemplateValue","CONFIG_MAP","cloudInit","templateHasQGAPackage","i","splice","getOwnerReferencesFromVM","_resource$metadata","kind","apiVersion","uid","isEdit","CLOUD_INIT","ownerReferences","setData","save","Promise","reject","toSave","secretId","keypair","getAccessCredentialsValidation","errors","fieldName","message","val","_V$persistentVolumeCl","handlerUSBTablet","_this$spec$template$s","hasExist","assign","$delete","setBootMethod","boot","set","features","smm","noKeys","setTPM","deleteSSHFromUserData","userDataJson","isEmpty","$nextTick","_this$$refs$yamlEdito","$refs","yamlEditor","updateValue","toggleAdvanced","updateAgent","updateDataTemplateId","oldInstallAgent","updateReserved","updateTerminationGracePeriodSeconds","old","_neu$","_old$","imageOSType","oldImageId","deep","hasCloudComment","_diff","difference"],"mappings":"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","file":"harvester-v1.2.1.umd.min.detail~edit~formatters.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[(_vm.arbitrary)?_c('div',[(_vm.value)?_c('BadgeState',{attrs:{\"color\":_vm.stateBackground,\"label\":_vm.stateDisplay}}):_vm._e()],1):_c('BadgeState',{attrs:{\"value\":_vm.row}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<script>\nimport { BadgeState } from '@components/BadgeState';\nimport { colorForState, stateDisplay } from '@shell/plugins/dashboard-store/resource-class';\nexport default {\n  components: { BadgeState },\n  props:      {\n    value: {\n      type:    String,\n      default: ''\n    },\n    row: {\n      type:     Object,\n      required: true\n    },\n    col: {\n      type:    Object,\n      default: () => {}\n    },\n\n    arbitrary: {\n      type:    Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      stateDisplay:    '',\n      stateBackground: ''\n    };\n  },\n\n  watch: {\n    value: {\n      handler() {\n        if (this.arbitrary) {\n          const color = colorForState(this.value);\n\n          this.stateDisplay = stateDisplay(this.value);\n          this.stateBackground = color.replace('text-', 'bg-');\n        }\n      },\n      immediate: true\n    }\n  }\n};\n</script>\n\n<template>\n  <div>\n    <div v-if=\"arbitrary\">\n      <BadgeState\n        v-if=\"value\"\n        :color=\"stateBackground\"\n        :label=\"stateDisplay\"\n      />\n    </div>\n    <BadgeState\n      v-else\n      :value=\"row\"\n    />\n  </div>\n</template>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--2-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!./BadgeStateFormatter.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--2-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!./BadgeStateFormatter.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BadgeStateFormatter.vue?vue&type=template&id=5313d6ee&\"\nimport script from \"./BadgeStateFormatter.vue?vue&type=script&lang=js&\"\nexport * from \"./BadgeStateFormatter.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/cli-service/node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport { clone } from '@shell/utils/object';\nimport { SECRET } from '@shell/config/types';\nimport { HCI } from '../../types';\nimport { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\nimport { OS } from './index';\n\nexport const QGA_JSON = {\n  package_update: true,\n  packages:       ['qemu-guest-agent'],\n  runcmd:         [\n    [\n      'systemctl',\n      'enable',\n      '--now',\n      'qemu-guest-agent.service'\n    ]\n  ]\n};\n\nexport const QGA_MAP = { default: 'qemu-guest-agent.service' };\n\nexport const USB_TABLET = [{\n  bus:  'usb',\n  name: 'tablet',\n  type: 'tablet'\n}];\n\nexport const SSH_EXISTING_TYPE = {\n  EXISTING_ALL:             'EXISTING_ALL',\n  EXISTING_ONLY_ANNOTATION: 'EXISTING_ANNOTATION',\n  EXISTING_ONLY_CLOUD:      'EXISTING_CLOUD',\n};\n\nexport default {\n  methods: {\n    hasCloudConfigComment(userScript) {\n      // Check that userData contains: #cloud-config\n      const userDataDoc = userScript ? YAML.parseDocument(userScript) : YAML.parseDocument({});\n      const items = userDataDoc?.contents?.items || [];\n\n      let exist = false;\n\n      if (userDataDoc?.comment === 'cloud-config' || userDataDoc?.comment?.includes('cloud-config\\n')) {\n        exist = true;\n      }\n\n      if (userDataDoc?.commentBefore === 'cloud-config' || userDataDoc?.commentBefore?.includes('cloud-config\\n')) {\n        exist = true;\n      }\n\n      items.map((item) => {\n        const key = item.key;\n\n        if (key?.commentBefore === 'cloud-config' || key?.commentBefore?.includes('cloud-config\\n')) {\n          exist = true;\n        }\n      });\n\n      return exist;\n    },\n\n    getSSHValue(id) {\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const sshs = this.$store.getters[`${ inStore }/all`](HCI.SSH) || [];\n\n      return sshs.find( O => O.id === id)?.spec?.publicKey || undefined;\n    },\n\n    getOsType(vm) {\n      return vm.metadata?.labels?.[HCI_ANNOTATIONS.OS];\n    },\n\n    getMatchQGA(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n      let hasCustomQGA = false;\n\n      OS.forEach((O) => {\n        if (O.match) {\n          hasCustomQGA = O.match.find(type => type === osType);\n        }\n      });\n\n      if (hasCustomQGA) {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP[osType];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      }\n\n      return _QGA_JSON;\n    },\n\n    getSimilarRuncmd(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n\n      if (osType === 'openSUSE') {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['suse'];\n      }\n\n      return _QGA_JSON.runcmd[0];\n    },\n\n    hasInstallAgent(userScript, osType, oldValue) {\n      let dataFormat = {};\n      const _QGA_JSON = this.getMatchQGA(osType);\n\n      try {\n        dataFormat = jsyaml.load(userScript) || {};\n      } catch (e) {\n        new Error('Function(hasInstallAgent) error');\n\n        return oldValue;\n      }\n\n      return dataFormat?.packages?.includes('qemu-guest-agent') && !!dataFormat?.runcmd?.find( S => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n    },\n\n    isInstallUSBTablet(spec) {\n      const inputs = spec?.template?.spec?.domain?.devices?.inputs;\n\n      if (Array.isArray(inputs)) {\n        return !!inputs.find((O) => {\n          return isEqual(O, USB_TABLET[0]);\n        });\n      } else {\n        return false;\n      }\n    },\n\n    isEfiEnabled(spec) {\n      return !!(spec?.template?.spec?.domain?.firmware?.bootloader?.efi);\n    },\n\n    isTpmEnabled(spec) {\n      return !!spec?.template?.spec?.domain?.devices?.tpm ;\n    },\n\n    isSecureBoot(spec) {\n      return !!spec?.template?.spec?.domain?.firmware?.bootloader?.efi?.secureBoot;\n    },\n\n    getCloudInitNoCloud(spec) {\n      const secret = this.getSecret(spec);\n      let userData = secret?.decodedData?.userdata;\n      let networkData = secret?.decodedData?.networkdata;\n\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n\n      // If the value is not found inside the secret, the data may be written directly in the yaml\n      if (cloudInitNoCloud?.userData) {\n        userData = cloudInitNoCloud.userData;\n        this.saveUserDataAsClearText = true;\n      }\n\n      if (cloudInitNoCloud?.networkData) {\n        networkData = cloudInitNoCloud.networkData;\n        this.saveNetworkDataAsClearText = true;\n      }\n\n      return { userData, networkData };\n    },\n\n    getSecret(spec) {\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const secrets = this.$store.getters[`${ inStore }/all`](SECRET) || [];\n\n      const secretName = cloudInitNoCloud?.secretRef?.name || cloudInitNoCloud?.networkDataSecretRef?.name;\n\n      const secret = secrets.find(s => s.metadata.name === secretName);\n\n      return secret;\n    },\n\n    getAccessCredentials(spec) {\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const secrets = this.$store.getters[`${ inStore }/all`](SECRET) || [];\n      const credentials = spec?.template?.spec?.accessCredentials || [];\n      const annotations = JSON.parse(spec.template.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] || '[]');\n\n      return credentials.map((c) => {\n        const source = !!c.userPassword ? 'userPassword' : 'sshPublicKey';\n        const secretName = c[source]?.source?.secret?.secretName;\n        const secretRef = secrets.find(s => s.metadata.name === secretName);\n        const out = {\n          source, username: '', newPassword: '', users: [], sshkeys: [], secretName, secretRef\n        };\n\n        if (!secretRef) {\n          out.secretRef = undefined;\n        } else if (source === 'userPassword') {\n          const username = Object.keys(secretRef?.data)[0];\n          const newPassword = secretRef.decodedData[username];\n\n          out.username = username;\n          out.newPassword = newPassword;\n        } else {\n          const users = c[source].propagationMethod.qemuGuestAgent.users;\n          const sshkeys = annotations?.[secretName];\n\n          out.users = users;\n          out.sshkeys = sshkeys;\n        }\n\n        return out;\n      });\n    },\n\n    getVolumeClaimTemplates(vm) {\n      let out = [];\n\n      try {\n        out = JSON.parse(vm.metadata.annotations[HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]);\n      } catch (e) {\n        new Error(`Function: getVolumeClaimTemplates, ${ e }`);\n      }\n\n      return out;\n    },\n\n    getRootImageId(vm) {\n      const volume = this.getVolumeClaimTemplates(vm);\n\n      return volume[0]?.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] || '';\n    },\n\n    getSSHFromAnnotation(spec) {\n      const ids = spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.SSH_NAMES] || '[]';\n\n      return JSON.parse(ids);\n    },\n\n    convertToJson(script = '') {\n      let out = {};\n\n      try {\n        out = jsyaml.load(script);\n      } catch (e) {\n        new Error('Function(convertToJson) error');\n      }\n\n      return out;\n    },\n\n    getSSHFromUserData(userData) {\n      return this.convertToJson(userData)?.ssh_authorized_keys || [];\n    },\n\n    compareSSHValue(a = '', b = '') {\n      const r = /(\\r\\n\\t|\\n|\\r\\t)|(\\s*)/gm;\n\n      return a.replace(r, '') === b.replace(r, '');\n    },\n\n    mergeAllSSHs(spec) {\n      const keys = this.getSSHFromAnnotation(spec);\n      const { userScript: userData } = this.getCloudInitNoCloud(spec);\n\n      if (!keys?.length < 0 && !userData) {\n        return [];\n      }\n\n      let out = [];\n\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const allSSHs = this.$store.getters[`${ inStore }/all`](HCI.SSH) || [];\n\n      out = (keys || []).map((id) => {\n        const hasSSHResource = allSSHs.find(ssh => ssh.id === id);\n\n        if (hasSSHResource) {\n          return {\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          };\n        } else {\n          return {\n            id,\n            data: id,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_ANNOTATION\n          };\n        }\n      });\n\n      const _userDataSSH = this.getSSHFromUserData(userData);\n\n      _userDataSSH.map( (sshValue) => {\n        const hasSSHResource = allSSHs.find(ssh => this.compareSSHValue(sshValue, ssh.spec?.publicKey));\n\n        if (hasSSHResource && !out.find(O => O.id === hasSSHResource.id)) {\n          out.push({\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          });\n        } else if (!hasSSHResource) {\n          out.push({\n            id:   'Unknown',\n            data: sshValue,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_CLOUD\n          });\n        }\n      });\n\n      return out;\n    },\n  },\n};\n","import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport difference from 'lodash/difference';\n\nimport { sortBy } from '@shell/utils/sort';\nimport { set } from '@shell/utils/object';\n\nimport { allHash } from '@shell/utils/promise';\nimport { randomStr } from '@shell/utils/string';\nimport { base64Decode } from '@shell/utils/crypto';\nimport { formatSi, parseSi } from '@shell/utils/units';\nimport { SOURCE_TYPE, ACCESS_CREDENTIALS } from '../../config/harvester-map';\nimport { _CLONE, _CREATE, _VIEW } from '@shell/config/query-params';\nimport {\n  PV, PVC, STORAGE_CLASS, NODE, SECRET, CONFIG_MAP, NETWORK_ATTACHMENT, NAMESPACE, LONGHORN\n} from '@shell/config/types';\nimport { HCI } from '../../types';\nimport { HCI_SETTING } from '../../config/settings';\nimport { HOSTNAME } from '@shell/config/labels-annotations';\nimport { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\nimport impl, { QGA_JSON, USB_TABLET } from './impl';\nimport { uniq } from '@shell/utils/array';\n\nexport const MANAGEMENT_NETWORK = 'management Network';\n\nexport const OS = [{\n  label: 'Windows',\n  value: 'windows'\n}, {\n  label: 'Linux',\n  value: 'linux'\n}, {\n  label: 'SUSE Linux Enterprise',\n  value: 'SLEs'\n}, {\n  label: 'Debian',\n  value: 'debian'\n}, {\n  label: 'Fedora',\n  value: 'fedora'\n}, {\n  label: 'Gentoo',\n  value: 'gentoo'\n}, {\n  label: 'Oracle',\n  value: 'oracle'\n}, {\n  label: 'Red Hat',\n  value: 'redhat'\n}, {\n  label: 'openSUSE',\n  value: 'openSUSE',\n}, {\n  label: 'Ubuntu',\n  value: 'ubuntu'\n}, {\n  label: 'Other Linux',\n  match: ['centos'],\n  value: 'otherLinux'\n}];\n\nexport const CD_ROM = 'cd-rom';\nexport const HARD_DISK = 'disk';\n\nexport default {\n  mixins: [impl],\n\n  props: {\n    value: {\n      type:     Object,\n      required: true,\n    },\n\n    resource: {\n      type:    String,\n      default: ''\n    }\n  },\n\n  async fetch() {\n    const inStore = this.$store.getters['currentProduct'].inStore;\n    const hash = {\n      pvs:               this.$store.dispatch(`${ inStore }/findAll`, { type: PV }),\n      pvcs:              this.$store.dispatch(`${ inStore }/findAll`, { type: PVC }),\n      storageClasses:    this.$store.dispatch(`${ inStore }/findAll`, { type: STORAGE_CLASS }),\n      sshs:              this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.SSH }),\n      settings:          this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.SETTING }),\n      images:            this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.IMAGE }),\n      versions:          this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM_VERSION }),\n      templates:         this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM_TEMPLATE }),\n      networkAttachment: this.$store.dispatch(`${ inStore }/findAll`, { type: NETWORK_ATTACHMENT }),\n      vmis:              this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VMI }),\n      vmims:             this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VMIM }),\n      vms:               this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM }),\n      secrets:           this.$store.dispatch(`${ inStore }/findAll`, { type: SECRET }),\n      addons:            this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.ADD_ONS }),\n    };\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](NODE)) {\n      hash.nodes = this.$store.dispatch(`${ inStore }/findAll`, { type: NODE });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](HCI.CLUSTER_NETWORK)) {\n      hash.clusterNetworks = this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.CLUSTER_NETWORK });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](HCI.VLAN_CONFIG)) {\n      hash.clusterNetworks = this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VLAN_CONFIG });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](LONGHORN.VOLUMES)) {\n      hash.longhornVolumes = this.$store.dispatch(`${ inStore }/findAll`, { type: LONGHORN.VOLUMES });\n    }\n\n    const res = await allHash(hash);\n\n    const hasPCISchema = this.$store.getters[`${ inStore }/schemaFor`](HCI.PCI_DEVICE);\n\n    this.enabledPCI = res.addons.find(addon => addon.name === 'pcidevices-controller')?.spec?.enabled === true && hasPCISchema;\n  },\n\n  data() {\n    const isClone = this.realMode === _CLONE;\n\n    return {\n      OS,\n      isClone,\n      spec:                          null,\n      osType:                        'linux',\n      sshKey:                        [],\n      runStrategy:                   'RerunOnFailure',\n      installAgent:                  true,\n      hasCreateVolumes:              [],\n      installUSBTablet:              true,\n      networkScript:                 '',\n      userScript:                    '',\n      imageId:                       '',\n      diskRows:                      [],\n      networkRows:                   [],\n      machineType:                   '',\n      secretName:                    '',\n      secretRef:                     null,\n      showAdvanced:                  false,\n      deleteAgent:                   true,\n      memory:                        null,\n      cpu:                           '',\n      reservedMemory:                null,\n      accessCredentials:             [],\n      efiEnabled:                    false,\n      tpmEnabled:                    false,\n      secureBoot:                    false,\n      userDataTemplateId:            '',\n      saveUserDataAsClearText:       false,\n      saveNetworkDataAsClearText:    false,\n      enabledPCI:                    false,\n      immutableMode:                 this.realMode === _CREATE ? _CREATE : _VIEW,\n      terminationGracePeriodSeconds: '',\n    };\n  },\n\n  computed: {\n    inStore() {\n      return this.$store.getters['currentProduct'].inStore;\n    },\n\n    images() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.IMAGE);\n    },\n\n    versions() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.VM_VERSION);\n    },\n\n    templates() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.VM_TEMPLATE);\n    },\n\n    pvcs() {\n      return this.$store.getters[`${ this.inStore }/all`](PVC);\n    },\n\n    secrets() {\n      return this.$store.getters[`${ this.inStore }/all`](SECRET);\n    },\n\n    filteredNamespaces() {\n      return this.$store.getters['harvester/all'](NAMESPACE).filter(namespace => !namespace.isSystem);\n    },\n\n    nodes() {\n      return this.$store.getters['harvester/all'](NODE);\n    },\n\n    nodesIdOptions() {\n      const nodes = this.$store.getters[`${ this.inStore }/all`](NODE);\n\n      const networkNames = this.networkRows.map(n => n.networkName);\n      const vmNetworks = this.$store.getters[`${ this.inStore }/all`](NETWORK_ATTACHMENT);\n      const selectedVMNetworks = networkNames.map(name => vmNetworks.find(n => n.id === name)).filter(n => n?.id);\n      const clusterNetworks = uniq(selectedVMNetworks.map(n => n.clusterNetworkResource?.id));\n\n      return nodes.filter(N => !N.isUnSchedulable).map((node) => {\n        const requireLabelKeys = [];\n        let isNetworkSchedule = true;\n\n        if (clusterNetworks.length > 0) {\n          clusterNetworks.map((clusterNetwork) => {\n            requireLabelKeys.push(`network.harvesterhci.io/${ clusterNetwork }`);\n          });\n        }\n\n        requireLabelKeys.map((requireLabelKey) => {\n          if (node.metadata?.labels?.[requireLabelKey] !== 'true') {\n            isNetworkSchedule = false;\n          }\n        });\n\n        return {\n          label:    isNetworkSchedule ? node.nameDisplay : `${ node.nameDisplay } (${ this.t('harvester.virtualMachine.scheduling.networkNotSupport') })`,\n          value:    node.id,\n          disabled: !isNetworkSchedule,\n        };\n      });\n    },\n\n    defaultStorageClass() {\n      const defaultStorage = this.$store.getters[`${ this.inStore }/all`](STORAGE_CLASS).find( O => O.isDefault);\n\n      return defaultStorage?.metadata?.name || 'longhorn';\n    },\n\n    storageClassSetting() {\n      try {\n        const storageClassValue = this.$store.getters[`${ this.inStore }/all`](HCI.SETTING).find( O => O.id === HCI_SETTING.DEFAULT_STORAGE_CLASS)?.value;\n\n        return JSON.parse(storageClassValue);\n      } catch (e) {\n        return {};\n      }\n    },\n\n    customVolumeMode() {\n      return this.storageClassSetting.volumeMode || 'Block';\n    },\n\n    customAccessMode() {\n      return this.storageClassSetting.accessModes || 'ReadWriteMany';\n    },\n\n    isWindows() {\n      return this.osType === 'windows';\n    },\n\n    needNewSecret() {\n      // When creating a template it is always necessary to create a new secret.\n      return this.resource === HCI.VM_VERSION || this.isCreate;\n    },\n\n    defaultTerminationSetting() {\n      const setting = this.$store.getters[`${ this.inStore }/all`](HCI.SETTING).find( O => O.id === HCI_SETTING.VM_TERMINATION_PERIOD) || {};\n\n      return Number(setting?.value || setting?.default);\n    },\n\n    affinityLabels() {\n      return {\n        namespaceInputLabel:      this.t('harvesterManager.affinity.namespaces.label'),\n        namespaceSelectionLabels: [\n          this.t('harvesterManager.affinity.thisPodNamespace'),\n          this.t('workload.scheduling.affinity.allNamespaces'),\n          this.t('harvesterManager.affinity.matchExpressions.inNamespaces')\n        ],\n        addLabel:               this.t('harvesterManager.affinity.addLabel'),\n        topologyKeyPlaceholder: this.t('harvesterManager.affinity.topologyKey.placeholder')\n      };\n    },\n  },\n\n  async created() {\n    await this.$store.dispatch(`${ this.inStore }/findAll`, { type: SECRET });\n    this.getInitConfig({ value: this.value, init: this.isCreate });\n  },\n\n  methods: {\n    getInitConfig(config) {\n      const {\n        value, existUserData, fromTemplate = false, init = false\n      } = config;\n\n      const vm = this.resource === HCI.VM ? value : this.resource === HCI.BACKUP ? this.value.status?.source : value.spec.vm;\n\n      const spec = vm?.spec;\n\n      if (!spec) {\n        return;\n      }\n      const resources = spec.template.spec.domain.resources;\n\n      // If the user is created via yaml, there may be no \"resources.limits\": kubectl apply -f https://kubevirt.io/labs/manifests/vm.yaml\n      if (!resources?.limits || (resources?.limits && !resources?.limits?.memory && resources?.limits?.memory !== null)) {\n        spec.template.spec.domain.resources = {\n          ...spec.template.spec.domain.resources,\n          limits: {\n            ...spec.template.spec.domain.resources.limits,\n            memory: spec.template.spec.domain.resources.requests.memory\n          }\n        };\n      }\n\n      const runStrategy = spec.runStrategy || 'RerunOnFailure';\n      const machineType = value.machineType;\n      const cpu = spec.template.spec.domain?.cpu?.cores;\n      const memory = spec.template.spec.domain.resources.limits.memory;\n      const reservedMemory = vm.metadata?.annotations?.[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      const terminationGracePeriodSeconds = spec.template.spec?.terminationGracePeriodSeconds || this.defaultTerminationSetting;\n\n      const sshKey = this.getSSHFromAnnotation(spec) || [];\n\n      const imageId = this.getRootImageId(vm) || '';\n      const diskRows = this.getDiskRows(vm);\n      const networkRows = this.getNetworkRows(vm, { fromTemplate, init });\n      const hasCreateVolumes = this.getHasCreatedVolumes(spec) || [];\n\n      let { userData = undefined, networkData = undefined } = this.getCloudInitNoCloud(spec);\n\n      if (this.resource === HCI.BACKUP) {\n        const secretBackups = this.value.status?.secretBackups;\n\n        if (secretBackups) {\n          const secretNetworkData = secretBackups[0]?.data?.networkdata || '';\n          const secretUserData = secretBackups[0]?.data?.userdata || '';\n\n          userData = base64Decode(secretUserData);\n          networkData = base64Decode(secretNetworkData);\n        }\n      }\n      const osType = this.getOsType(vm) || 'linux';\n\n      userData = this.isCreate && !existUserData && !this.isClone ? this.getInitUserData({ osType }) : userData;\n\n      const installUSBTablet = this.isInstallUSBTablet(spec);\n      const installAgent = this.hasInstallAgent(userData, osType, true);\n      const efiEnabled = this.isEfiEnabled(spec);\n      const tpmEnabled = this.isTpmEnabled(spec);\n      const secureBoot = this.isSecureBoot(spec);\n\n      const secretRef = this.getSecret(spec);\n      const accessCredentials = this.getAccessCredentials(spec);\n\n      if (Object.prototype.hasOwnProperty.call(spec, 'running')) {\n        delete spec.running;\n        spec.runStrategy = 'RerunOnFailure';\n      }\n\n      this.$set(this, 'spec', spec);\n      this.$set(this, 'runStrategy', runStrategy);\n      this.$set(this, 'secretRef', secretRef);\n      this.$set(this, 'accessCredentials', accessCredentials);\n      this.$set(this, 'userScript', userData);\n      this.$set(this, 'networkScript', networkData);\n\n      this.$set(this, 'sshKey', sshKey);\n      this.$set(this, 'osType', osType);\n      this.$set(this, 'installAgent', installAgent);\n\n      this.$set(this, 'cpu', cpu);\n      this.$set(this, 'memory', memory);\n      this.$set(this, 'reservedMemory', reservedMemory);\n      this.$set(this, 'machineType', machineType);\n      this.$set(this, 'terminationGracePeriodSeconds', terminationGracePeriodSeconds);\n\n      this.$set(this, 'installUSBTablet', installUSBTablet);\n      this.$set(this, 'efiEnabled', efiEnabled);\n      this.$set(this, 'tpmEnabled', tpmEnabled);\n      this.$set(this, 'secureBoot', secureBoot);\n\n      this.$set(this, 'hasCreateVolumes', hasCreateVolumes);\n      this.$set(this, 'networkRows', networkRows);\n      this.$set(this, 'imageId', imageId);\n\n      this.$set(this, 'diskRows', diskRows);\n\n      this.refreshYamlEditor();\n    },\n\n    getDiskRows(vm) {\n      const namespace = vm.metadata.namespace;\n      const _volumes = vm.spec.template.spec.volumes || [];\n      const _disks = vm.spec.template.spec.domain.devices.disks || [];\n      const _volumeClaimTemplates = this.getVolumeClaimTemplates(vm);\n\n      let out = [];\n\n      if (_disks.length === 0) {\n        out.push({\n          id:               randomStr(5),\n          source:           SOURCE_TYPE.IMAGE,\n          name:             'disk-0',\n          accessMode:       'ReadWriteMany',\n          bus:              'virtio',\n          volumeName:       '',\n          size:             '10Gi',\n          type:             HARD_DISK,\n          storageClassName: '',\n          image:            this.imageId,\n          volumeMode:       'Block',\n        });\n      } else {\n        out = _disks.map( (DISK, index) => {\n          const volume = _volumes.find( V => V.name === DISK.name );\n\n          let size = '';\n          let image = '';\n          let source = '';\n          let realName = '';\n          let container = '';\n          let volumeName = '';\n          let accessMode = '';\n          let volumeMode = '';\n          let storageClassName = '';\n          let hotpluggable = false;\n          let dataSource = null;\n\n          const type = DISK?.cdrom ? CD_ROM : DISK?.disk ? HARD_DISK : '';\n\n          if (volume?.containerDisk) { // SOURCE_TYPE.CONTAINER\n            source = SOURCE_TYPE.CONTAINER;\n            container = volume.containerDisk.image;\n          }\n\n          if (volume.persistentVolumeClaim && volume.persistentVolumeClaim?.claimName) {\n            volumeName = volume.persistentVolumeClaim.claimName;\n            const DVT = _volumeClaimTemplates.find( T => T.metadata.name === volumeName);\n\n            realName = volumeName;\n            // If the DVT can be found, it cannot be an existing volume\n            if (DVT) {\n              // has annotation (HCI_ANNOTATIONS.IMAGE_ID) => SOURCE_TYPE.IMAGE\n              if (DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] !== undefined) {\n                image = DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID];\n                source = SOURCE_TYPE.IMAGE;\n              } else {\n                source = SOURCE_TYPE.NEW;\n              }\n\n              const dataVolumeSpecPVC = DVT?.spec || {};\n\n              volumeMode = dataVolumeSpecPVC?.volumeMode;\n              accessMode = dataVolumeSpecPVC?.accessModes?.[0];\n              size = dataVolumeSpecPVC?.resources?.requests?.storage || '10Gi';\n              storageClassName = dataVolumeSpecPVC?.storageClassName;\n              dataSource = dataVolumeSpecPVC?.dataSource;\n            } else {\n              // SOURCE_TYPE.ATTACH_VOLUME\n              // Compatible with VMS that have been created before, Because they're not saved in the annotation\n              const allPVCs = this.$store.getters['harvester/all'](PVC);\n              const pvcResource = allPVCs.find( O => O.id === `${ namespace }/${ volume?.persistentVolumeClaim?.claimName }`);\n\n              source = SOURCE_TYPE.ATTACH_VOLUME;\n              accessMode = pvcResource?.spec?.accessModes?.[0] || 'ReadWriteMany';\n              size = pvcResource?.spec?.resources?.requests?.storage || '10Gi';\n              storageClassName = pvcResource?.spec?.storageClassName;\n              volumeMode = pvcResource?.spec?.volumeMode || 'Block';\n              volumeName = pvcResource?.metadata?.name || '';\n            }\n\n            hotpluggable = volume.persistentVolumeClaim.hotpluggable || false;\n          }\n\n          const bus = DISK?.disk?.bus || DISK?.cdrom?.bus;\n\n          const bootOrder = DISK?.bootOrder ? DISK?.bootOrder : index;\n\n          const parseValue = parseSi(size);\n\n          const formatSize = formatSi(parseValue, {\n            increment:   1024,\n            addSuffix:   false,\n            maxExponent: 3,\n            minExponent: 3,\n          });\n\n          const volumeStatus = this.pvcs.find(P => P.id === `${ this.value.metadata.namespace }/${ volumeName }`)?.relatedPV?.metadata?.annotations?.[HCI_ANNOTATIONS.VOLUME_ERROR];\n\n          return {\n            id:         randomStr(5),\n            bootOrder,\n            source,\n            name:       DISK.name,\n            realName,\n            bus,\n            volumeName,\n            container,\n            accessMode,\n            size:       `${ formatSize }Gi`,\n            volumeMode: volumeMode || this.customVolumeMode,\n            image,\n            type,\n            storageClassName,\n            hotpluggable,\n            volumeStatus,\n            dataSource,\n            namespace\n          };\n        });\n      }\n\n      out = sortBy(out, 'bootOrder');\n\n      return out.filter( O => O.name !== 'cloudinitdisk');\n    },\n\n    getNetworkRows(vm, config) {\n      const { fromTemplate = false, init = false } = config;\n\n      const networks = vm.spec.template.spec.networks || [];\n      const interfaces = vm.spec.template.spec.domain.devices.interfaces || [];\n\n      const out = interfaces.map( (I, index) => {\n        const network = networks.find( N => I.name === N.name);\n\n        const type = I.sriov ? 'sriov' : I.bridge ? 'bridge' : 'masquerade';\n\n        const isPod = !!network.pod;\n\n        return {\n          ...I,\n          index,\n          type,\n          isPod,\n          newCreateId: (fromTemplate || init) ? randomStr(10) : false,\n          model:       I.model,\n          networkName: isPod ? MANAGEMENT_NETWORK : network?.multus?.networkName,\n        };\n      });\n\n      return out;\n    },\n\n    parseVM() {\n      this.userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n      this.parseOther();\n      this.parseAccessCredentials();\n      this.parseNetworkRows(this.networkRows);\n      this.parseDiskRows(this.diskRows);\n    },\n\n    parseOther() {\n      if (!this.spec.template.spec.domain.machine) {\n        this.$set(this.spec.template.spec.domain, 'machine', { type: this.machineType });\n      } else {\n        this.$set(this.spec.template.spec.domain.machine, 'type', this.machineType);\n      }\n\n      this.spec.template.spec.domain.cpu.cores = this.cpu;\n      this.spec.template.spec.domain.resources.limits.cpu = this.cpu ? this.cpu.toString() : this.cpu;\n      this.spec.template.spec.domain.resources.limits.memory = this.memory;\n      this.spec.template.spec.terminationGracePeriodSeconds = this.terminationGracePeriodSeconds;\n\n      // parse reserved memory\n      const vm = this.resource === HCI.VM ? this.value : this.value.spec.vm;\n\n      if (!this.reservedMemory) {\n        delete vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      } else {\n        vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY] = this.reservedMemory;\n      }\n    },\n\n    parseDiskRows(disk) {\n      const disks = [];\n      const volumes = [];\n      const diskNameLables = [];\n      const volumeClaimTemplates = [];\n\n      disk.forEach( (R, index) => {\n        const prefixName = this.value.metadata?.name || '';\n\n        let dataVolumeName = '';\n\n        if (R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n          dataVolumeName = R.volumeName;\n        } else if (this.isClone || !this.hasCreateVolumes.includes(R.realName)) {\n          dataVolumeName = `${ prefixName }-${ R.name }-${ randomStr(5).toLowerCase() }`;\n        } else {\n          dataVolumeName = R.realName;\n        }\n\n        const _disk = this.parseDisk(R, index);\n        const _volume = this.parseVolume(R, dataVolumeName);\n        const _dataVolumeTemplate = this.parseVolumeClaimTemplate(R, dataVolumeName);\n\n        disks.push(_disk);\n        volumes.push(_volume);\n        diskNameLables.push(dataVolumeName);\n\n        if (R.source !== SOURCE_TYPE.CONTAINER) {\n          volumeClaimTemplates.push(_dataVolumeTemplate);\n        }\n      });\n\n      if (!this.secretName || this.needNewSecret) {\n        this.secretName = this.generateSecretName(this.secretNamePrefix);\n      }\n\n      if (!disks.find( D => D.name === 'cloudinitdisk') && (this.userData || this.networkData)) {\n        if (!this.isWindows) {\n          disks.push({\n            name: 'cloudinitdisk',\n            disk: { bus: 'virtio' }\n          });\n\n          const userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n\n          const cloudinitdisk = {\n            name:             'cloudinitdisk',\n            cloudInitNoCloud: {}\n          };\n\n          if (this.saveUserDataAsClearText) {\n            cloudinitdisk.cloudInitNoCloud.userData = userData;\n          } else {\n            cloudinitdisk.cloudInitNoCloud.secretRef = { name: this.secretName };\n          }\n\n          if (this.saveNetworkDataAsClearText) {\n            cloudinitdisk.cloudInitNoCloud.networkData = this.networkScript;\n          } else {\n            cloudinitdisk.cloudInitNoCloud.networkDataSecretRef = { name: this.secretName };\n          }\n\n          volumes.push(cloudinitdisk);\n        }\n      }\n\n      let spec = {\n        ...this.spec,\n        runStrategy: this.runStrategy,\n        template:    {\n          ...this.spec.template,\n          metadata: {\n            ...this.spec?.template?.metadata,\n            annotations: {\n              ...this.spec?.template?.metadata?.annotations,\n              [HCI_ANNOTATIONS.SSH_NAMES]: JSON.stringify(this.sshKey)\n            },\n            labels: {\n              ...this.spec?.template?.metadata?.labels,\n              [HCI_ANNOTATIONS.VM_NAME]: this.value?.metadata?.name,\n            }\n          },\n          spec: {\n            ...this.spec.template?.spec,\n            domain: {\n              ...this.spec.template?.spec?.domain,\n              devices: {\n                ...this.spec.template?.spec?.domain?.devices,\n                disks,\n              },\n            },\n            volumes,\n          }\n        }\n      };\n\n      if (volumes.length === 0) {\n        delete spec.template.spec.volumes;\n      }\n\n      if (this.resource === HCI.VM) {\n        if (!this.isSingle) {\n          spec = this.multiVMScheduler(spec);\n        }\n\n        this.$set(this.value.metadata, 'annotations', {\n          ...this.value.metadata.annotations,\n          [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates),\n          [HCI_ANNOTATIONS.NETWORK_IPS]:           JSON.stringify(this.value.networkIps)\n        });\n\n        this.$set(this.value.metadata, 'labels', {\n          ...this.value.metadata.labels,\n          [HCI_ANNOTATIONS.CREATOR]: 'harvester',\n          [HCI_ANNOTATIONS.OS]:      this.osType\n        });\n\n        this.$set(this.value, 'spec', spec);\n        this.$set(this, 'spec', spec);\n      } else if (this.resource === HCI.VM_VERSION) {\n        this.$set(this.value.spec.vm, 'spec', spec);\n        this.$set(this.value.spec.vm.metadata, 'annotations', { ...this.value.spec.vm.metadata.annotations, [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates) });\n        this.$set(this.value.spec.vm.metadata, 'labels', {\n          ...this.value.spec.vm.metadata.labels,\n          [HCI_ANNOTATIONS.OS]: this.osType,\n        });\n        this.$set(this, 'spec', spec);\n      }\n    },\n\n    removeTrailingHyphen(str) {\n      while (str.endsWith('-')) {\n        str = str.slice(0, -1);\n      }\n\n      return str;\n    },\n\n    multiVMScheduler(spec) {\n      const namePrefix = this.removeTrailingHyphen(this.namePrefix);\n\n      spec.template.metadata.labels[HCI_ANNOTATIONS.VM_NAME_PREFIX] = namePrefix;\n\n      const rule = {\n        weight:          1,\n        podAffinityTerm: {\n          topologyKey:   HOSTNAME,\n          labelSelector: { matchLabels: { [HCI_ANNOTATIONS.VM_NAME_PREFIX]: namePrefix } }\n        }\n      };\n\n      return {\n        ...spec,\n        template: {\n          ...spec.template,\n          spec: {\n            ...spec.template.spec,\n            affinity: {\n              ...spec.template.spec.affinity,\n              podAntiAffinity: {\n                ...spec.template.spec?.affinity?.podAntiAffinity,\n                preferredDuringSchedulingIgnoredDuringExecution: [\n                  ...(spec.template.spec?.affinity?.podAntiAffinity?.preferredDuringSchedulingIgnoredDuringExecution || []),\n                  rule\n                ]\n              }\n            }\n          }\n        }\n      };\n    },\n\n    parseNetworkRows(networkRow) {\n      const networks = [];\n      const interfaces = [];\n\n      networkRow.forEach( (R) => {\n        const _network = this.parseNetwork(R);\n        const _interface = this.parseInterface(R);\n\n        networks.push(_network);\n        interfaces.push(_interface);\n      });\n\n      const spec = {\n        ...this.spec.template.spec,\n        domain: {\n          ...this.spec.template.spec.domain,\n          devices: {\n            ...this.spec.template.spec.domain.devices,\n            interfaces,\n          },\n        },\n        networks\n      };\n\n      this.$set(this.spec.template, 'spec', spec);\n    },\n\n    parseAccessCredentials() {\n      const out = [];\n      const annotations = {};\n      const users = JSON.parse(this.spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] || '[]');\n\n      for (const row of this.accessCredentials) {\n        if (this.needNewSecret) {\n          row.secretName = this.generateSecretName(this.secretNamePrefix);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          users.push(row.username);\n          out.push({\n            userPassword: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { } }\n            }\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          users.push(...row.users);\n          annotations[row.secretName] = row.sshkeys;\n          out.push({\n            sshPublicKey: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { users: row.users } }\n            }\n          });\n        }\n      }\n\n      if (out.length === 0 && !!this.spec.template.spec.accessCredentials) {\n        delete this.spec.template.spec.accessCredentials;\n      } else {\n        this.spec.template.spec.accessCredentials = out;\n      }\n\n      if (users.length !== 0) {\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] = JSON.stringify(Array.from(new Set(users)));\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] = JSON.stringify(annotations);\n      }\n    },\n\n    getInitUserData(config) {\n      const _QGA_JSON = this.getMatchQGA(config.osType);\n\n      const out = jsyaml.dump(_QGA_JSON);\n\n      return `#cloud-config\\n${ out }`;\n    },\n\n    /**\n     * Generate user data yaml which is decide by the \"Install guest agent\",\n     * \"OS type\", \"SSH Keys\" and user input.\n     * @param config\n     */\n    getUserData(config) {\n      try {\n        // https://github.com/eemeli/yaml/issues/136\n        let userDataDoc = this.userScript ? YAML.parseDocument(this.userScript) : YAML.parseDocument({});\n\n        const allSSHAuthorizedKeys = this.mergeSSHAuthorizedKeys(this.userScript);\n\n        if (allSSHAuthorizedKeys.length > 0) {\n          userDataDoc.setIn(['ssh_authorized_keys'], allSSHAuthorizedKeys);\n        } else if (YAML.isCollection(userDataDoc.getIn('ssh_authorized_keys'))) {\n          userDataDoc.deleteIn(['ssh_authorized_keys']);\n        }\n\n        userDataDoc = config.installAgent ? this.mergeQGA({ userDataDoc, ...config }) : this.deleteQGA({ userDataDoc, ...config });\n        const userDataYaml = userDataDoc.toString();\n\n        if (userDataYaml === '{}\\n') {\n          // When the YAML parsed value is '{}\\n', it means that the userData is empty, then undefined is returned.\n          return undefined;\n        }\n\n        return userDataYaml;\n      } catch (e) {\n        console.error('Error: Unable to parse yaml document', e); // eslint-disable-line no-console\n\n        return this.userScript;\n      }\n    },\n\n    updateSSHKey(neu) {\n      this.$set(this, 'sshKey', neu);\n    },\n\n    updateCpuMemory(cpu, memory) {\n      this.$set(this, 'cpu', cpu);\n      this.$set(this, 'memory', memory);\n    },\n\n    parseDisk(R, index) {\n      const out = { name: R.name };\n\n      if (R.type === HARD_DISK) {\n        out.disk = { bus: R.bus };\n      } else if (R.type === CD_ROM) {\n        out.cdrom = { bus: R.bus };\n      }\n\n      out.bootOrder = index + 1;\n\n      return out;\n    },\n\n    parseVolume(R, dataVolumeName) {\n      const out = { name: R.name };\n\n      if (R.source === SOURCE_TYPE.CONTAINER) {\n        out.containerDisk = { image: R.container };\n      } else if (R.source === SOURCE_TYPE.IMAGE || R.source === SOURCE_TYPE.NEW || R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n        out.persistentVolumeClaim = { claimName: dataVolumeName };\n        if (R.hotpluggable) {\n          out.persistentVolumeClaim.hotpluggable = true;\n        }\n      }\n\n      return out;\n    },\n\n    parseVolumeClaimTemplate(R, dataVolumeName) {\n      if (!String(R.size).includes('Gi') && R.size) {\n        R.size = `${ R.size }Gi`;\n      }\n\n      const out = {\n        metadata: { name: dataVolumeName },\n        spec:     {\n          accessModes: [R.accessMode],\n          resources:   { requests: { storage: R.size } },\n          volumeMode:  R.volumeMode\n        }\n      };\n\n      if (R.dataSource) {\n        out.spec.dataSource = R.dataSource;\n      }\n\n      switch (R.source) {\n      case SOURCE_TYPE.ATTACH_VOLUME:\n        out.spec.storageClassName = R.storageClassName;\n        break;\n      case SOURCE_TYPE.NEW:\n        out.spec.storageClassName = R.storageClassName;\n        break;\n      case SOURCE_TYPE.IMAGE: {\n        const image = this.images.find( I => R.image === I.id);\n\n        if (image) {\n          out.spec.storageClassName = `longhorn-${ image.metadata.name }`;\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: image.id };\n        } else {\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: '' };\n        }\n\n        break;\n      }\n      }\n\n      return out;\n    },\n\n    getSSHListValue(arr) {\n      return arr.map( id => this.getSSHValue(id)).filter( O => O !== undefined);\n    },\n\n    parseInterface(R) {\n      const _interface = {};\n      const type = R.type;\n\n      _interface[type] = {};\n\n      if (R.macAddress) {\n        _interface.macAddress = R.macAddress;\n      }\n\n      _interface.model = R.model;\n      _interface.name = R.name;\n\n      return _interface;\n    },\n\n    parseNetwork(R) {\n      const out = { name: R.name };\n\n      if (R.isPod) {\n        out.pod = {};\n      } else {\n        out.multus = { networkName: R.networkName };\n      }\n\n      return out;\n    },\n\n    updateUserData(value) {\n      this.userScript = value;\n    },\n\n    updateNetworkData(value) {\n      this.networkScript = value;\n    },\n\n    mergeSSHAuthorizedKeys(yaml) {\n      try {\n        const sshAuthorizedKeys = YAML.parseDocument(yaml)\n          .get('ssh_authorized_keys')\n          ?.toJSON() || [];\n\n        const sshList = this.getSSHListValue(this.sshKey);\n\n        return sshAuthorizedKeys.length ? [...new Set([...sshList, ...sshAuthorizedKeys])] : sshList;\n      } catch (e) {\n        return [];\n      }\n    },\n\n    /**\n     * @param paths A Object path, e.g. 'a.b.c' => ['a', 'b', 'c']. Refer to https://eemeli.org/yaml/#scalar-values\n     * @returns\n     */\n    deleteYamlDocProp(doc, paths) {\n      try {\n        const item = doc.getIn([])?.items[0];\n        const key = item?.key;\n        const hasCloudConfigComment = !!key?.commentBefore?.includes('cloud-config');\n        const isMatchProp = key.source === paths[paths.length - 1];\n\n        if (key && hasCloudConfigComment && isMatchProp) {\n          // Comments are mounted on the next node and we should not delete the node containing cloud-config\n        } else {\n          doc.deleteIn(paths);\n        }\n      } catch (e) {}\n    },\n\n    mergeQGA(config) {\n      const { osType, userDataDoc } = config;\n      const _QGA_JSON = this.getMatchQGA(osType);\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      let packages = userDataJSON?.packages || [];\n      let runcmd = userDataJSON?.runcmd || [];\n\n      userDataDoc.setIn(['package_update'], true);\n\n      if (Array.isArray(packages)) {\n        if (!packages.includes('qemu-guest-agent')) {\n          packages.push('qemu-guest-agent');\n        }\n      } else {\n        packages = QGA_JSON.packages;\n      }\n\n      if (Array.isArray(runcmd)) {\n        let findIndex = -1;\n        const hasSameRuncmd = runcmd.find( S => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n\n        const hasSimilarRuncmd = runcmd.find( (S, index) => {\n          if (Array.isArray(S) && S.join('-') === this.getSimilarRuncmd(osType).join('-')) {\n            findIndex = index;\n\n            return true;\n          }\n\n          return false;\n        });\n\n        if (hasSimilarRuncmd) {\n          runcmd[findIndex] = _QGA_JSON.runcmd[0];\n        } else if (!hasSameRuncmd) {\n          runcmd.push(_QGA_JSON.runcmd[0]);\n        }\n      } else {\n        runcmd = _QGA_JSON.runcmd;\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []); // It needs to be set empty first, as it is possible that cloud-init comments are mounted on this node\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    deleteQGA(config) {\n      const { osType, userDataDoc, deletePackage = false } = config;\n\n      const userDataTemplateValue = this.$store.getters['harvester/byId'](CONFIG_MAP, this.userDataTemplateId)?.data?.cloudInit || '';\n\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      const packages = userDataJSON?.packages || [];\n      const runcmd = userDataJSON?.runcmd || [];\n\n      if (Array.isArray(packages) && deletePackage) {\n        const templateHasQGAPackage = this.convertToJson(userDataTemplateValue);\n\n        for (let i = 0; i < packages.length; i++) {\n          if (packages[i] === 'qemu-guest-agent') {\n            if (!(Array.isArray(templateHasQGAPackage?.packages) && templateHasQGAPackage.packages.includes('qemu-guest-agent'))) {\n              packages.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      if (Array.isArray(runcmd)) {\n        const _QGA_JSON = this.getMatchQGA(osType);\n\n        for (let i = 0; i < runcmd.length; i++) {\n          if (Array.isArray(runcmd[i]) && runcmd[i].join('-') === _QGA_JSON.runcmd[0].join('-')) {\n            runcmd.splice(i, 1);\n          }\n        }\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []);\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    generateSecretName(name) {\n      return name ? `${ name }-${ randomStr(5).toLowerCase() }` : undefined;\n    },\n\n    getOwnerReferencesFromVM(resource) {\n      const name = resource.metadata.name;\n      const kind = resource.kind;\n      const apiVersion = this.resource === HCI.VM ? 'kubevirt.io/v1' : 'harvesterhci.io/v1beta1';\n      const uid = resource?.metadata?.uid;\n\n      return [{\n        name,\n        kind,\n        uid,\n        apiVersion,\n      }];\n    },\n\n    async saveSecret(vm) {\n      if (!vm?.spec || !this.secretName || this.isWindows) {\n        return true;\n      }\n\n      let secret = this.getSecret(vm.spec);\n\n      // const userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n      if (!secret && this.isEdit && this.secretRef) {\n        // When editing the vm, if the userData and networkData are deleted, we also need to clean up the secret values\n        secret = this.secretRef;\n      }\n\n      if (!secret || this.needNewSecret) {\n        secret = await this.$store.dispatch('harvester/create', {\n          metadata: {\n            name:            this.secretName,\n            namespace:       this.value.metadata.namespace,\n            labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n            ownerReferences: this.getOwnerReferencesFromVM(vm)\n          },\n          type: SECRET\n        });\n      }\n\n      try {\n        if (secret) {\n          // If none of the data comes from the secret, then no data needs to be saved to the secret\n          if (!this.saveUserDataAsClearText || !this.saveNetworkDataAsClearText) {\n            secret.setData('userdata', this.userData || '');\n            secret.setData('networkdata', this.networkScript || '');\n            await secret.save();\n          }\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    async saveAccessCredentials(vm) {\n      if (!vm?.spec) {\n        return true;\n      }\n\n      // save\n      const toSave = [];\n\n      for (const row of this.accessCredentials) {\n        let secretRef = row.secretRef;\n\n        if (!secretRef || this.needNewSecret) {\n          secretRef = await this.$store.dispatch('harvester/create', {\n            metadata: {\n              name:            row.secretName,\n              namespace:       vm.metadata.namespace,\n              labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n              ownerReferences: this.getOwnerReferencesFromVM(vm)\n            },\n            type: SECRET\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          secretRef.setData(row.username, row.newPassword);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          for (const secretId of row.sshkeys) {\n            const keypair = (this.$store.getters['harvester/all'](HCI.SSH) || []).find(s => s.id === secretId);\n\n            secretRef.setData(`${ keypair.metadata.namespace }-${ keypair.metadata.name }`, keypair.spec.publicKey);\n          }\n        }\n\n        toSave.push(secretRef);\n      }\n\n      try {\n        for (const resource of toSave) {\n          await resource.save();\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    getAccessCredentialsValidation() {\n      const errors = [];\n\n      for (let i = 0; i < this.accessCredentials.length; i++) {\n        const row = this.accessCredentials[i];\n        const source = row.source;\n\n        if (source === ACCESS_CREDENTIALS.RESET_PWD) {\n          if (!row.username) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.newPassword) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (row.newPassword && row.newPassword.length < 6) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.number.min', { key: fieldName, val: '6' });\n\n            errors.push(message);\n          }\n        } else {\n          if (!row.users || row.users.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.sshkeys || row.sshkeys.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.sshKeyValue');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n        }\n\n        if (errors.length > 0) {\n          break;\n        }\n      }\n\n      return errors;\n    },\n\n    getHasCreatedVolumes(spec) {\n      const out = [];\n\n      if (spec.template.spec.volumes) {\n        spec.template.spec.volumes.forEach((V) => {\n          if (V?.persistentVolumeClaim?.claimName) {\n            out.push(V.persistentVolumeClaim.claimName);\n          }\n        });\n      }\n\n      return out;\n    },\n\n    handlerUSBTablet(val) {\n      const hasExist = this.isInstallUSBTablet(this.spec);\n      const inputs = this.spec.template.spec.domain.devices?.inputs || [];\n\n      if (val && !hasExist) {\n        if (inputs.length > 0) {\n          inputs.push(USB_TABLET[0]);\n        } else {\n          Object.assign(this.spec.template.spec.domain.devices, {\n            inputs: [\n              USB_TABLET[0]\n            ]\n          });\n        }\n      } else if (!val) {\n        const index = inputs.findIndex(O => isEqual(O, USB_TABLET[0]));\n\n        if (hasExist && inputs.length === 1) {\n          this.$delete(this.spec.template.spec.domain.devices, 'inputs');\n        } else if (hasExist) {\n          inputs.splice(index, 1);\n          this.$set(this.spec.template.spec.domain.devices, 'inputs', inputs);\n        }\n      }\n    },\n\n    setBootMethod(boot = { efi: false, secureBoot: false }) {\n      if (boot.efi && boot.secureBoot) {\n        set(this.spec.template.spec.domain, 'features.smm.enabled', true);\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.secureBoot', true);\n      } else if (boot.efi && !boot.secureBoot) {\n        // set(this.spec.template.spec.domain, 'features.smm.enabled', false);\n\n        try {\n          this.$delete(this.spec.template.spec.domain.features.smm, 'enabled');\n          const noKeys = Object.keys(this.spec.template.spec.domain.features.smm).length === 0;\n\n          if (noKeys) {\n            this.$delete(this.spec.template.spec.domain.features, 'smm');\n          }\n        } catch (e) {}\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.secureBoot', false);\n      } else {\n        this.$delete(this.spec.template.spec.domain, 'firmware');\n        this.$delete(this.spec.template.spec.domain.features, 'smm');\n      }\n    },\n\n    setTPM(tpmEnabled) {\n      if (tpmEnabled) {\n        set(this.spec.template.spec.domain.devices, 'tpm', {});\n      } else {\n        this.$delete(this.spec.template.spec.domain.devices, 'tpm');\n      }\n    },\n\n    deleteSSHFromUserData(ssh = []) {\n      const sshAuthorizedKeys = this.getSSHFromUserData(this.userScript);\n\n      ssh.map((id) => {\n        const index = sshAuthorizedKeys.findIndex(value => value === this.getSSHValue(id));\n\n        if (index >= 0) {\n          sshAuthorizedKeys.splice(index, 1);\n        }\n      });\n\n      const userDataJson = this.convertToJson(this.userScript);\n\n      userDataJson.ssh_authorized_keys = sshAuthorizedKeys;\n\n      if (sshAuthorizedKeys.length === 0) {\n        delete userDataJson.ssh_authorized_keys;\n      }\n\n      if (isEmpty(userDataJson)) {\n        this.$set(this, 'userScript', undefined);\n      } else {\n        this.$set(this, 'userScript', jsyaml.dump(userDataJson));\n      }\n\n      this.refreshYamlEditor();\n    },\n\n    refreshYamlEditor() {\n      this.$nextTick(() => {\n        this.$refs.yamlEditor?.updateValue();\n      });\n    },\n\n    toggleAdvanced() {\n      this.showAdvanced = !this.showAdvanced;\n    },\n\n    updateAgent(value) {\n      if (!value) {\n        this.deletePackage = true;\n      }\n    },\n\n    updateDataTemplateId(type, id) {\n      if (type === 'user') {\n        const oldInstallAgent = this.installAgent;\n\n        this.userDataTemplateId = id;\n        this.$nextTick(() => {\n          if (oldInstallAgent) {\n            this.installAgent = oldInstallAgent;\n          }\n        });\n      }\n    },\n\n    updateReserved(value = {}) {\n      const { memory } = value;\n\n      this.$set(this, 'reservedMemory', memory);\n    },\n\n    updateTerminationGracePeriodSeconds(value) {\n      this.$set(this, 'terminationGracePeriodSeconds', value);\n    },\n  },\n\n  watch: {\n    diskRows: {\n      handler(neu, old) {\n        if (Array.isArray(neu)) {\n          const imageId = neu[0]?.image;\n          const image = this.images.find( I => imageId === I.id);\n          const osType = image?.imageOSType;\n\n          const oldImageId = old[0]?.image;\n\n          if (this.isCreate && oldImageId === imageId && imageId) {\n            this.osType = osType;\n          }\n        }\n      }\n    },\n\n    secretRef: {\n      handler(secret) {\n        if (secret && this.resource !== HCI.BACKUP) {\n          this.secretName = secret?.metadata.name;\n        }\n      },\n      immediate: true,\n      deep:      true\n    },\n\n    isWindows(val) {\n      if (val) {\n        this.$set(this, 'sshKey', []);\n        this.$set(this, 'userScript', undefined);\n        this.$set(this, 'installAgent', false);\n      }\n    },\n\n    installUSBTablet(val) {\n      this.handlerUSBTablet(val);\n    },\n\n    efiEnabled(val) {\n      this.setBootMethod({ efi: val, secureBoot: this.secureBoot });\n    },\n\n    secureBoot(val) {\n      this.setBootMethod({ efi: this.efiEnabled, secureBoot: val });\n    },\n\n    tpmEnabled(val) {\n      this.setTPM(val);\n    },\n\n    installAgent: {\n      /**\n       * rules\n       * 1. The value in user Data is the first priority\n       * 2. After selecting the template, if checkbox is checked, only merge operation will be performed on user data,\n       *    if checkbox is unchecked, no value will be deleted in user data\n       */\n      handler(neu) {\n        if (this.deleteAgent) {\n          let out = this.getUserData({\n            installAgent: neu, osType: this.osType, deletePackage: this.deletePackage\n          });\n\n          if (neu) {\n            const hasCloudComment = this.hasCloudConfigComment(out);\n\n            if (!hasCloudComment) {\n              out = `#cloud-config\\n${ out }`;\n            }\n          }\n\n          this.$set(this, 'userScript', out);\n          this.refreshYamlEditor();\n        }\n        this.deleteAgent = true;\n        this.deletePackage = false;\n      }\n    },\n\n    osType(neu) {\n      const out = this.getUserData({ installAgent: this.installAgent, osType: neu });\n\n      this.$set(this, 'userScript', out);\n      this.refreshYamlEditor();\n    },\n\n    userScript(neu, old) {\n      const hasInstallAgent = this.hasInstallAgent(neu, this.osType, this.installAgent);\n\n      if (hasInstallAgent !== this.installAgent) {\n        this.deleteAgent = false;\n        this.installAgent = hasInstallAgent;\n      }\n    },\n\n    sshKey(neu, old) {\n      const _diff = difference(old, neu);\n\n      if (_diff.length && this.isEdit) {\n        this.deleteSSHFromUserData(_diff);\n      }\n    }\n  }\n};\n"],"sourceRoot":""}